шаблонПоискРолей := <роль_%d> as var(func: type(<Роль>)) @filter(eq(<код.роли>, %d))
шаблонПоискПрав := <права_%d> as var(func: type(<Права>)) @filter(eq(<код.прав>, %d))
шаблонПоискПрав := <обработчик_%d> as var(func: type(<Права>)) @filter(eq(<код.прав>, %d))

<обработчики_роль_%d> as var(func: eq(<маршрут>, {{маршрут}})) @filter(uid(<роль_%d>))+

<обработчик_{{очередь}}> as var(func: type(<Обработчик>)) @filter(eq(<сервис>, "{{имяСервиса}}") AND eq(<имя_обработчика>,"{{имяОбработчика}}"))



<обработчик_{{имяОбработчика`}}> as var(func: type(<Обработчик>)) @filter(eq(<сервис>, "{{имяСервиса}}") AND eq(<имя_обработчика>,"{{имяОбработчика}}"))

map[string]interface{}{
		"маршрут":             маршрут,
		"комманда":            комманда,
		"описание":            описание,
		"имяШаблона":          имяШаблона,
		"очередьОбработчиков": очередьОбработчиков,
		"очередьАссинхронныхОбработчиков": очередьАссинхронныхОбработчиков,
		"праваДоступа":                    праваДоступа,
	}

{
    маршрут
    комманда
    логин
    описание
    праваДоступа[
        роли [
            {
                код.роли
                имя.роли
            },
            {
                код.роли
                имя.роли
            }
        ]
        права[
            {
                код.прав
                имя.прав
            },
            {
                код.прав
                имя.прав
            }
        ]
    ]
    очередьОбработчиков[
        {
            сервис
            обработчик
            очередь
        } ,
         {
            сервис
            обработчик
            очередь
        }
        ]

        ассинхронно[
            {
                обработчик
                сервис
            },
            {
                обработчик
                сервис
            }
        ]
    

}



// для каждой роли - группы прав доступа сгенерируем новый обработчик даже если они будут одинаковые.
"query":"{
        <роль_{{номер}}> as var(func: type(<Роль>)) @filter(eq(<код.роли>, группаПравДоступа.кодРоли))
        <права_%d> as var(func: type(<Права>)) @filter(eq(<код.прав>, %d))
       
        <обработчики_роль_%d> as var(func: eq(<маршрут>, {{маршрут}})) @filter(uid(<роль_%d>))

        <обработчик_{{очередь}}> as var(func: type(<Обработчик>)) @filter(eq(<сервис>, "{{имяСервиса}}") AND eq(<имя_обработчика>,"{{имяОбработчика}}"))

        <обработчик_{{имяОбработчика}}> as var(func: type(<Обработчик>)) @filter(eq(<сервис>, "{{имяСервиса}}") AND eq(<имя_обработчика>,"{{имяОбработчика}}"))

        <маршрут> as var(func: eq(<маршрут>, {{маршрут}})) 
}",
"mutations":[
       {
        "cond": "@if(eq(len(<маршрут>),0))",
        "set": [
                    {
                        "dgraph.type":"ОбработчикМаршрута",
                        "маршурт": {{имяМаршрута}},
                        "комманда": {{комманда}},
                        "имяШаблона": {{имяШаблона}},
                        "обработчики":[
                            {
                                "dgraph.type":"Обработчики",
                                "код.роли":{{кодРоли}},
                                "права":[
                                    {"uid":uid(<роль_{{номер}}>) } // uid прав например "чтение"
                                ],
                                "пользователи":[
                                    {"uid":"0x186a7" } // uid пользователя
                                ],
                                "очередь_обработчиков":[
                                    {
                                        dgraph.type":"ОчередностьОбработчика",
                                        "uid":uid(<обработчик_{{очередь}}>),
                                        "очередь":{{очередь}}
                                        }
                                ],
                                "ассинхронная_очередь_обоработчиков":[
                                    {
                                        
                                        "uid":uid(<обработчик_{{имяОбработчика}}>)
                                    }
                                ]
                            }
                        ]
                    }
                ]
        }
          {
        "cond": "@if(eq(len(<обработчики_роль_%d>),0))",
        "set": [
                    {                      
                        "uid": uid(<маршрут>),                      
                        "обработчики":[
                            {
                                "dgraph.type":"Обработчики",
                                "код.роли":{{кодРоли}},
                                "права":[
                                    {"uid":"0x186a7" } // uid прав например "чтение"
                                ],
                                "пользователи":[
                                    {"uid":"0x186a7" } // uid пользователя
                                ],
                                "очередь_обработчиков":[
                                    {"uid":"0x186a7"}
                                ],
                                "ассинхронная_очередь_обоработчиков":[
                                    {"uid":"0x186a7"}
                                ]
                            }
                        ]
                    }
                ]
        }

]
}