package main

import (
	"net/url"
	"strings"
	"sync"

	. "aoanima.ru/ConnQuic"
	. "aoanima.ru/DGApi"
	. "aoanima.ru/Logger"
	. "aoanima.ru/QErrors"
	"github.com/quic-go/quic-go"
)

type Конфигурация struct{}

var Сервис ИмяСервиса = "МенеджерОбработчиков"
var Описание string = "Служба для добавения, и изменения очереди обработчиков на запросы от клиентов. Управляет данными БД из которой SynQuic получает очередь обработки."
var Маршруты = map[string]func(quic.Stream, Сообщение){
	"добавитьРоль":                ДобавитьРоль,
	"изменитьРоль":                ИзменитьРоль,
	"удалитьРоль":                 УдалитьРоль,
	"добавитьПрава":               ДобавитьПрава,
	"изменитьПрава":               ИзменитьПрава,
	"удалиитьПрава":               УдалитьПрава,
	"добавитьОбработчик":          ДобавитьОбработчик,
	"изменитьОбработчик":          ИзменитьОбработчик,
	"удалитьОбработчик":           УдалитьОбработчик,
	"изменитьОчередьОбработчиков": ИзменитьОчередьОбработчиков,
	"добавитьМаршрут":             ДобавитьМаршрут,
	"изменитьМаршрут":             ИзменитьМаршрут,
	"удалитьМаршрут":              УдалитьМаршрут,
	"получитьОчередьОбработчиков": ПолучитьОчередьОбработчиков,
	"получитьСписокОчередей":      ПолучитьСписокОчередей,
}

// var каталогСтатичныхФайлов string
var Конфиг = &Конфигурация{}
var База СоединениеСДГраф

func init() {
	Инфо(" проверяем какие аргументы переданы при запуске, если пусто то читаем конфиг, если конфига нет то устанавливаем значения по умолчанию %+v \n")

	// каталогСтатичныхФайлов = "../../jetHTML/static/"
	ЧитатьКонфиг(Конфиг)
	База = ДГраф()

	статус := База.Схема(СхемаБазы)

	if статус.Код != Ок {
		Ошибка(" Ошибка записи схемы  %+v \n", статус)
	}
}

var клиент = make(Клиент)

func main() {
	Инфо("  %+v \n", " Запуск сервиса редактирования очереди обработчиков")
	сервер := &СхемаСервера{
		Имя:   "SynQuic",
		Адрес: "localhost:4242",
		ДанныеСессии: ДанныеСессии{
			Блок:   &sync.RWMutex{},
			Потоки: []quic.Stream{},
		},
	}
	массивМаршрутов := []Маршрут{}
	for маршрут := range Маршруты {
		массивМаршрутов = append(массивМаршрутов, Маршрут(маршрут))
	}

	сообщениеРегистрации := Сообщение{
		Сервис:      Сервис,
		Регистрация: true,
		Маршруты:    массивМаршрутов,
	}
	Инфо(" сообщениеРегистрации %+v \n", сообщениеРегистрации)

	клиент.Соединиться(сервер,
		сообщениеРегистрации,
		ОбработчикОтветаРегистрации,
		ОбработчикЗапросовСервера)
}

func ОбработчикОтветаРегистрации(сообщение Сообщение) {
	Инфо("  ОбработчикОтветаРегистрации %+v \n", сообщение)
}

func ОбработчикЗапросовСервера(поток quic.Stream, сообщение Сообщение) {

	маршрутЗапроса, err := url.Parse(сообщение.Запрос.МаршрутЗапроса)
	Инфо(" маршрутЗапроса %+v \n", маршрутЗапроса)
	if err != nil {
		Ошибка("Parse маршрутЗапроса: ", err)
	}
	/*
		url будет какой нибудь /редакторМаршрутов или /редакторОбработчиков и как следствие получение обработчика из url не корректно

		любое действие будет сопровождатся отправкой формы, с полем "действие", из него и будет получать обработчик

		исключение будет составлять открытие страницы редактора. ТОгда по умолчанию

	*/
	маршрутЗапроса.Path = strings.Trim(маршрутЗапроса.Path, "/")
	urlКарта := strings.Split(маршрутЗапроса.Path, "/")

	// в каждый обработчик передаём сообщение и поток, после обработчик отправляем данные сразу в поток

	if сообщение.Запрос.ТипЗапроса == GET {
		// анализируем url параметры
	}

	if сообщение.Запрос.Форма != nil {
		действие, естьДействие := сообщение.Запрос.Форма["действие"]
		Инфо("действие %+v \n", действие)

		if естьДействие {
			if обработчикЗапроса, ok := Маршруты[действие[0]]; ok {
				обработчикЗапроса(поток, сообщение)
			} else {
				Ошибка("Функция  %+s не найдена \n", обработчикЗапроса)
				отправить, err := Кодировать(сообщение)
				if err != nil {
					Ошибка("  %+v \n", err)
				}
				поток.Write(отправить)
			}
		} else {
			if urlКарта[0] == "редакторМаршрутов" {
				ПолучитьСписокОчередей(поток, сообщение)
			} else {
				Ошибка(" не понятно что делать %+v \n", сообщение)

			}
		}
	}

	// var Обрабочтик string
	// if len(действия) == 0 {
	// 	/*не добавляем авторизацию т.к. уже получили данные о клиенте, для построения маршрута*/
	// 	// Инфо(" Пустой маршрут, добавляем в маршруты обработку по умолчанию: авторизация \n")
	// 	// Читаем заголовки парсим и проверяем JWT
	// 	// Обрабочтик = "авторизация" //првоерим и валидируем токен, получим права доступа

	// } else {
	// 	Обрабочтик = действия[0]
	// }
	// //
	// if обработчик, ok := Маршруты[Обрабочтик]; ok {
	// 	обработчик(поток, сообщение)
	// } else {
	// 	Ошибка("Функция  %s nне найдена \n", Обрабочтик)
	// }

}
