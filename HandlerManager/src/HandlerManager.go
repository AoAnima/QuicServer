package main

import (
	"net/url"
	"strings"
	"sync"

	. "aoanima.ru/ConnQuic"
	. "aoanima.ru/DGApi"
	. "aoanima.ru/Logger"
	. "aoanima.ru/QErrors"
	"github.com/quic-go/quic-go"
)

type Конфигурация struct{}

var Сервис ИмяСервиса = "МенеджерОбработчиков"
var Описание string = "Служба для добавения, и изменения очереди обработчиков на запросы от клиентов. Управляет данными БД из которой SynQuic получает очередь обработки."
var Маршруты = map[string]func(quic.Stream, Сообщение){
	"добавитьОбработчик":          ДобавитьОбработчик,
	"изменитьОбработчик":          ИзменитьОбработчик,
	"удалитьОбработчик":           УдалитьОбработчик,
	"изменитьОчередьОбработчиков": ИзменитьОчередьОбработчиков,
	"добавитьМаршрут":             ДобавитьМаршрут,
	"изменитьМаршрут":             ИзменитьМаршрут,
	"удалитьМаршрут":              УдалитьМаршрут,
}

// var каталогСтатичныхФайлов string
var Конфиг = &Конфигурация{}
var База СоединениеСДГраф

func init() {
	Инфо(" проверяем какие аргументы переданы при запуске, если пусто то читаем конфиг, если конфига нет то устанавливаем значения по умолчанию %+v \n")

	// каталогСтатичныхФайлов = "../../HTML/static/"
	ЧитатьКонфиг(Конфиг)
	База = ДГраф()
	статус := База.Схема(ДанныеЗапроса{
		Запрос: СхемаБазы,
	})

	if статус.Код != Ок {
		Ошибка(" Ошибка записи схемы  %+v \n", статус)
	}
}

var клиент = make(Клиент)

func main() {
	Инфо("  %+v \n", " Запуск сервиса редактирования очереди обработчиков")
	сервер := &СхемаСервера{
		Имя:   "SynQuic",
		Адрес: "localhost:4242",
		ДанныеСессии: ДанныеСессии{
			Блок:   &sync.RWMutex{},
			Потоки: []quic.Stream{},
		},
	}
	массивМаршрутов := []Маршрут{}
	for маршрут, _ := range Маршруты {
		массивМаршрутов = append(массивМаршрутов, Маршрут(маршрут))
	}

	сообщениеРегистрации := Сообщение{
		Сервис:      Сервис,
		Регистрация: true,
		Маршруты:    массивМаршрутов,
	}

	клиент.Соединиться(сервер,
		сообщениеРегистрации,
		ОбработчикОтветаРегистрации,
		ОбработчикЗапросовСервера)
}

func ОбработчикОтветаРегистрации(сообщение Сообщение) {
	Инфо("  ОбработчикОтветаРегистрации %+v \n", сообщение)
}

func ОбработчикЗапросовСервера(поток quic.Stream, сообщение Сообщение) {

	маршрутЗапроса, err := url.Parse(сообщение.Запрос.МаршрутЗапроса)
	Инфо(" маршрутЗапроса %+v \n", маршрутЗапроса)
	if err != nil {
		Ошибка("Parse маршрутЗапроса: ", err)
	}

	маршрутЗапроса.Path = strings.Trim(маршрутЗапроса.Path, "/")
	действия := strings.Split(маршрутЗапроса.Path, "/")

	var Обрабочтик string
	if len(действия) == 0 {
		Инфо(" Пустой маршрут, добавляем в маршруты обработку по умолчанию: авторизация \n")
		// Читаем заголовки парсим и проверяем JWT
		Обрабочтик = "авторизация" //првоерим и валидируем токен, получим права доступа

	} else {
		Обрабочтик = действия[0]
	}
	if обработчик, ok := Маршруты[Обрабочтик]; ok {
		обработчик(поток, сообщение)
	} else {
		Ошибка("Функция  %s nне найдена \n", Обрабочтик)
	}

}
