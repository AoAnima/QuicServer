package main

import (
	"net/url"
	"strings"

	. "aoanima.ru/ConnQuic"
	. "aoanima.ru/DGApi"
	. "aoanima.ru/Logger"
	. "aoanima.ru/QErrors"
	"github.com/quic-go/quic-go"
)

/*
Очередь обработчиков
Каждый запрос от клиента может быть обработан одним и более количеством микросервисов, для того чтобы правильно отправлять запрос в сервисы нужно описать последовательность обработки запроса Сервиссами, и указать какой HTNL шаблон рендерить, или куда сделать редирект например после автоизации или регистрации)

КРоме того необходимо учитывать права доступа и роли пользователя, чтобы один и тот же маршрут по разному обрабатывался в заивсимости от роли польтзователя и его прав доступа.

дествие  | сервис | маршрут | роль | права | шаблон |  статусОтвета | редирект | ассинхронно |

	| Рендер | /формаРеситрации | ["гость"] | "формаРегистрации" | Ок | /личныйКабинет | нет

регистрация  | Авторизация | /формаРеситрации (url же не меняется) | ["гость"] |   |  |
*/

/*
Обработчик может указываться если значеине в поле действие называетя иначе чем функция которая должна обработать запрос
например действие: регистрация
Обработчик : сохранитьПользователя

таким образом разные действия могут обрабатыватся одним и тем же обработчиком или несколькитми обработчиками

например

дейсвтие: 	оформитьЗаказ
обработчики: сохранитьЗаказ

	отправитьПисьмоКлиенту
	отправитьУведомлениеПродавцу

маршрут: /формаЗаказа - по идее маршрут может быть любой. И обрабатывается если нет дейсвтия
шаблон: /формаЗаказа

По факту нужно проектировать запросы так что если есть только маршрут
exotiki.ru/каталог/цветы - то тут обработчик должен определяться из маршрута, типа шаблон каталог, со списком из категории цветы.

Обращаемся к обработчику отвечающему за базу с товарами
обработчик : получитьТовары - получаем товары из категории "цветы"
шаблон:      каталогТоваров

# Если нужно в зависимости от результата обработки выводить разный шаблон, то можно использовать структуру СОобщение

	map[int]Шаблон - int = Код из QErrors
	Шаблон структура, в которой опиывается при каком коде ответа работы сервиса , какой шаблон рендерить
*/

/*
Добавляет данные об обработчике в БД, особенно важно права доступа
Маршрут может быть пустой если есть действие, и наоборот, если есть маршрут а обработчика нету. не страшно, обработчик будет вычисляться из маршрута.
если есть Действие то оно в приоритете
*/
func ДобавитьОбработчик(поток quic.Stream, сообщение Сообщение) {

	ответ := сообщение.Ответ[Сервис]
	ответ.Сервис = Сервис
	ответ.ЗапросОбработан = true

	маршрут, статусМаршрут := ПолучитьЗначениеПоляФормы("маршрут", сообщение.Запрос.Форма)

	действие, статусДейсвтия := ПолучитьЗначениеПоляФормы("действие", сообщение.Запрос.Форма)

	if статусДейсвтия.Код != Ок && статусМаршрут.Код != Ок {
		ответ.СтатусОтвета = СтатусСервиса{
			Код:   Прочее,
			Текст: "действие и маршрут не заданы, должно быть установлено одно или оба поля",
		}
		сообщение.Ответ[Сервис] = ответ
		ОтправитьСообщение(поток, сообщение)
	}

	//
	обработчик, статусОбработчик := ПолучитьЗначениеПоляФормы("обработчик", сообщение.Запрос.Форма)
	if статусОбработчик.Код != Ок {
		Ошибка(" статус получения обработчика  %+v \n", статусОбработчик)
	}

	роль, статусРоль := ПолучитьВсеЗначенияПоляФормы("роль", сообщение.Запрос.Форма)
	if статусРоль.Код != Ок {
		Ошибка(" статус получения роли  %+v \n", статусРоль)
	}

	права, статусПрав := ПолучитьВсеЗначенияПоляФормы("права", сообщение.Запрос.Форма)
	if статусПрав.Код != Ок {
		Ошибка(" статус получения прав  %+v \n", статусПрав)
	}
	Инфо("Ножно, обрабатывать парами роль+права. разные роли и права могут иметь разные шаблоны и права доступа к одним и тем же обработчикам роль %+v права  %+v \n", роль, права)
	описание, статусОписание := ПолучитьЗначениеПоляФормы("оисание", сообщение.Запрос.Форма)
	if статусОписание.Код != Ок {
		Ошибка(" статус получения описания  %+v \n", статусОписание)
	}

	// Шаблон можно указывать как путь рабочийСтол/обработчики - где рабочийСтол это основной слой контента, а обработчики это шаблон который вставляется внутрь предидущего слоя.

	// шаблон, статусШаблон := ПолучитьЗначениеПоляФормы("шаблон", сообщение.Запрос.Форма)
	// if статусШаблон.Код != Ок {
	// 	Ошибка(" статус получения описания  %+v \n", статусШаблон)
	// }

	новыйОбработчик := &КонфигурацияОбработчика{

		Тип:        "Обработчик",
		Маршрут:    маршрут,
		Действие:   действие,
		Обработчик: обработчик,
		ПраваДоступа: []ПраваДоступа{
			{
				Тип:   "ПраваДоступа",
				Роль:  роль,
				Права: права,
			},
			// {
			// 	Тип:   "ПраваДоступа",
			// 	Роль:  []string{"модератор"},
			// 	Права: []string{"чтение", "создание", "изменение своего", "удаление своего"},
			// },
		},
		Описание: описание,
		Шаблонизатор: []Шаблон{{
			Тип:    "Шаблон",
			Код:    Ок,
			Шаблон: "новыйОбработчик",
		},
			{
				Тип:    "Шаблон",
				Код:    Прочее,
				Шаблон: "всплывающаяОшибка",
			},
		},
		// Ассинхронно: ассинхронно,
	}

	обработчикБин, статус := Json(новыйОбработчик)
	if статус != nil {
		Ошибка(" статус %+v \n", статус, обработчикБин)
	}
	// @filter(eq(<маршрут>, $path) OR eq(<действие>, $action))
	данные := ДанныеЗапроса{
		Запрос: `query <СохранитьОбработчик>($handler : string, $path : string, $action : string) {
							handlers as var(func: type(<Обработчик>))  @filter(eq(<обработчик>, $handler) AND eq(<маршрут>, $path) AND eq(<действие>, $action)) {				
								uid
							}
			 			} `,
		Мутация: []Мутация{
			{
				Условие: "@if(eq(len(handlers), 0))",
				Мутация: обработчикБин,
			},
		},
		Данные: map[string]string{
			"$handler": новыйОбработчик.Обработчик,
			"$path":    новыйОбработчик.Маршрут,
			"$action":  новыйОбработчик.Действие,
		},
	}
	результатИзменения, статусБазы := База.Изменить(данные)
	if статусБазы.Код != Ок {
		Ошибка(" статус %+v \n данные %+v \n", статусБазы, данные)
	}
	var данныеОтвета interface{}
	ИзJson(результатИзменения, &данныеОтвета)
	Инфо("Исходные данные %+v \n ответ %+s \n", данные, данныеОтвета)

	ответ.СтатусОтвета = СтатусСервиса{
		Код:   статусБазы.Код,
		Текст: статусБазы.Текст,
	}

	/******Получим данные нового узла, с UID для вставки в html */
	данные = ДанныеЗапроса{
		Запрос: `query <Обработчики>($handler : string, $path : string, $action : string) {					
							<Обработчик>(func: has(<обработчик>)){	
								uid			
								<маршрут>
								<действие>
								<обработчик>
								<доступ>{
									<пользователи>
									<права>
									<роль>
									uid
									dgraph.type
								}
								<описание>
								<шаблонизатор> {
									uid
									<имя_шаблона>
									<код>
									dgraph.type
								}
								<ассинхронно>
								dgraph.type
								expand(_all_)
							}	
			 			} `,

		Данные: map[string]string{
			"$handler": "создатьОбработчик",
			"$path":    "/редакторОбработчиков",
			"$action":  "создатьОбработчик",
		},
	}

	результатИзменения, статусБазы = База.Получить(данные)
	if статусБазы.Код != Ок {
		Ошибка(" статус %+v \n", статусБазы)
	}
	var данныеНовогоУзла КонфигурацияОбработчика
	ИзJson(результатИзменения, &данныеНовогоУзла)
	Инфо(" данныеНовогоУзла %+s \n", данныеНовогоУзла)

	ответ.Данные = данныеНовогоУзла
	ответ.ИмяШаблона = "новыйОбработчик"
	сообщение.Ответ[Сервис] = ответ
	ОтправитьСообщение(поток, сообщение)
}
func ИзменитьОбработчик(поток quic.Stream, сообщение Сообщение) {

}
func УдалитьОбработчик(поток quic.Stream, сообщение Сообщение) {

	ответ := сообщение.Ответ[Сервис]
	ответ.Сервис = Сервис
	ответ.ЗапросОбработан = true

	ид_обработчика, статус := ПолучитьЗначениеПоляФормы("ид_обработчика", сообщение.Запрос.Форма)
	if статус.Код != Ок {
		Ошибка("  %+v \n", статус)
	}

	данные := ДанныеЗапроса{
		Запрос: `query <УдалитьОбработчик>($uid : string) {
							<УдаляемыеУзлы>(func: uid($uid)) {				
								<обработчик_ид> as uid
								<доступ> {
									<доступ_ид> as uid
								}
								<шаблонизатор> {
									<шаблонизатор_ид> as uid
								}
							}
			 			} `,
		Мутация: []Мутация{
			{
				Удалить: []byte(`[
					{"uid": "uid(доступ_ид)"},
					{"uid": "uid(обработчик_ид)"},
					{"uid": "uid(шаблонизатор_ид)"}
					]`),
			},
		},
		Данные: map[string]string{
			"$uid": ид_обработчика,
		},
	}
	результатИзменения, статусБазы := База.Изменить(данные)
	if статусБазы.Код != Ок {
		Ошибка(" статус %+v \n данные %+v \n", статусБазы, данные)
	}
	var данныеОтвета interface{}
	ИзJson(результатИзменения, &данныеОтвета)
	Инфо("Исходные данные %+v \n ответ %+s \n", данные, данныеОтвета)

	ответ.СтатусОтвета = СтатусСервиса{
		Код:   статусБазы.Код,
		Текст: статусБазы.Текст,
	}
	ответ.Данные = данныеОтвета
	ответ.ИмяШаблона = "всплывающееСообщение"

	сообщение.Ответ[Сервис] = ответ
	ОтправитьСообщение(поток, сообщение)

}
func СоздатьОчередьОбработчиков(поток quic.Stream, сообщение Сообщение) {

}

func ИзменитьОчередьОбработчиков(поток quic.Stream, сообщение Сообщение) {

}
func ДобавитьМаршрут(поток quic.Stream, сообщение Сообщение) {

}
func ИзменитьМаршрут(поток quic.Stream, сообщение Сообщение) {

}
func УдалитьМаршрут(поток quic.Stream, сообщение Сообщение) {

}

func ДобавитьРоль(поток quic.Stream, сообщение Сообщение) {

}
func ИзменитьРоль(поток quic.Stream, сообщение Сообщение) {

}
func УдалитьРоль(поток quic.Stream, сообщение Сообщение) {

}
func ДобавитьПрава(поток quic.Stream, сообщение Сообщение) {

}
func ИзменитьПрава(поток quic.Stream, сообщение Сообщение) {

}
func УдалитьПрава(поток quic.Stream, сообщение Сообщение) {

}

func ПолучитьОчередьОбработчиков(поток quic.Stream, сообщение Сообщение) {

	маршрутЗапроса, err := url.Parse(сообщение.Запрос.МаршрутЗапроса)
	Инфо(" маршрутЗапроса %+v \n", маршрутЗапроса)

	if err != nil {
		Ошибка("Parse маршрутЗапроса: ", err)
	}
	маршрутЗапроса.Path = strings.Trim(маршрутЗапроса.Path, "/")
	urlКарта := strings.Split(маршрутЗапроса.Path, "/")

	/*
		Для получения очереди обработчиков нужно проанализировать url и данные формы
		если метод post то аналиируем форму
		если метод get то анализируем Сообщение.ЗАпрос.СтрокаЗапроса содержащую Query часть
		если там не передан параметр "действие" то ищем обработчик из path




	*/
	if сообщение.Запрос.ТипЗапроса == GET || сообщение.Запрос.ТипЗапроса == AJAX {
		// анализируем url параметры
		параметрыЗапроса := маршрутЗапроса.Query()
		дейсвтие, естьДействие := параметрыЗапроса["действие"]
		if естьДействие {
			// получить очередь из БД
			Инфо("получить очередь из БД для: %+v \n", дейсвтие)

		} else {
			if len(urlКарта) > 0 {
				/*
					может пройти по всем частам url и получить очереь обрабочиковдля каждого шага ?
					или брать только первый ?
				*/
				дейсвтие := urlКарта[0]
				Инфо("получить очередь из БД для: %+v \n", дейсвтие)

			}
		}

	}

	if сообщение.Запрос.ТипЗапроса == POST || сообщение.Запрос.ТипЗапроса == AJAXPost {

	}

}

func ПолучитьСписокОчередей(поток quic.Stream, сообщение Сообщение) {

}
