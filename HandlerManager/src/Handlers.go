package main

import (
	"net/url"
	"strings"

	. "aoanima.ru/ConnQuic"
	_ "aoanima.ru/DGApi"
	. "aoanima.ru/Logger"
	_ "aoanima.ru/QErrors"
	"github.com/quic-go/quic-go"
)

/*
Очередь обработчиков
Каждый запрос от клиента может быть обработан одним и более количеством микросервисов, для того чтобы правильно отправлять запрос в сервисы нужно описать последовательность обработки запроса Сервиссами, и указать какой HTNL шаблон рендерить, или куда сделать редирект например после автоизации или регистрации)

КРоме того необходимо учитывать права доступа и роли пользователя, чтобы один и тот же маршрут по разному обрабатывался в заивсимости от роли польтзователя и его прав доступа.

дествие  | сервис | маршрут | роль | права | шаблон |  статусОтвета | редирект | ассинхронно |

  		| Рендер | /формаРеситрации | ["гость"] | "формаРегистрации" | Ок | /личныйКабинет | нет

регистрация  | Авторизация | /формаРеситрации (url же не меняется) | ["гость"] |   |  |



*/

func ДобавитьОбработчик(поток quic.Stream, сообщение Сообщение) {
	ответ := сообщение.Ответ[Сервис]
	ответ.Сервис = Сервис
	ответ.ЗапросОбработан = true

	// маршрут, статус := ПолучитьЗначениеПоляФормы("маршрут", сообщение.Запрос.Форма)
	// роль, статус := ПолучитьВсеЗначенияПоляФормы("роль", сообщение.Запрос.Форма)
	// доступ, статус := ПолучитьВсеЗначенияПоляФормы("права", сообщение.Запрос.Форма)
	// описание, статус := ПолучитьЗначениеПоляФормы("оисание", сообщение.Запрос.Форма)

	// if статус.Код != Ок {
	// 	Ошибка(" статус.Текст %+v \n", статус.Текст)
	// // 	ответ.СтатусОтвета = статус
	// // 	ответ.Данные = map[string]bool{
	// // 		"МаршрутДобавлен": false,
	// // 	}
	// // 	сообщение.Ответ[Сервис] = ответ
	// // 	ОтправитьСообщение(поток, сообщение)
	// // 	return
	// }
	// доступJson := Json(доступ)
	// добавить := `[
	// 		{
	// 			"<маршрут>": "` + маршрут + `",
	// 			"<доступ>": {
	// 				<>
	// 			},
	// 			"<описание>": "",
	// 			"dgraph.type": "Vfhihen"
	// 		}
	// 	]`
	// ответиз, статусИзменения := База.Изменить(ДанныеЗапроса{
	// 	Запрос: добавить,
	// })
	// if статусИзменения.Код != Ок {
	// 	Ошибка(" ОписаниеОшибки %+v \n", статусИзменения.Текст)
	// }
	// Инфо("  %+v \n", ответиз, статусИзменения)

}
func ИзменитьОбработчик(поток quic.Stream, сообщение Сообщение) {

}
func УдалитьОбработчик(поток quic.Stream, сообщение Сообщение) {

}
func ИзменитьОчередьОбработчиков(поток quic.Stream, сообщение Сообщение) {

}
func ДобавитьМаршрут(поток quic.Stream, сообщение Сообщение) {

}
func ИзменитьМаршрут(поток quic.Stream, сообщение Сообщение) {

}
func УдалитьМаршрут(поток quic.Stream, сообщение Сообщение) {

}

func ПолучитьОчередьОбработчиков(поток quic.Stream, сообщение Сообщение) {

	маршрутЗапроса, err := url.Parse(сообщение.Запрос.МаршрутЗапроса)
	Инфо(" маршрутЗапроса %+v \n", маршрутЗапроса)

	if err != nil {
		Ошибка("Parse маршрутЗапроса: ", err)
	}
	маршрутЗапроса.Path = strings.Trim(маршрутЗапроса.Path, "/")
	urlКарта := strings.Split(маршрутЗапроса.Path, "/")

	/*
		Для получения очереди обработчиков нужно проанализировать url и данные формы
		если метод post то аналиируем форму
		если метод get то анализируем Сообщение.ЗАпрос.СтрокаЗапроса содержащую Query часть
		если там не передан параметр "действие" то ищем обработчик из path
	*/
	if сообщение.Запрос.ТипЗапроса == GET || сообщение.Запрос.ТипЗапроса == AJAX {
		// анализируем url параметры
		параметрыЗапроса := маршрутЗапроса.Query()
		дейсвтие, естьДействие := параметрыЗапроса["действие"]
		if естьДействие {
			// получить очередь из БД
			Инфо("получить очередь из БД для: %+v \n", дейсвтие)

		} else {
			if len(urlКарта) > 0 {
				/*
					может пройти по всем частам url и получить очереь обрабочиковдля каждого шага ?
					или брать только первый ?
				*/
				дейсвтие := urlКарта[0]
				Инфо("получить очередь из БД для: %+v \n", дейсвтие)

			}
		}

	}

	if сообщение.Запрос.ТипЗапроса == POST || сообщение.Запрос.ТипЗапроса == AJAXPost {

	}

}

func ПолучитьСписокОчередей(поток quic.Stream, сообщение Сообщение) {

}
