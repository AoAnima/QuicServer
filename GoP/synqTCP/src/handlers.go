package main

import (
	"encoding/binary"
	
	"net"

	. "aoanima.ru/logger"
	"github.com/google/uuid"
	jsoniter "github.com/json-iterator/go"
)

func обработчикИсходящихСоединения(клиент net.Conn, данныеДляОтвета chan []byte) {
	for данные := range данныеДляОтвета {
		if данные != nil{
			Инфо(" Отпраляем данные клиенту %+v \n", данные) 
			int, err := клиент.Write(данные)
			if err != nil {
				Ошибка("  %+v %+v \n", int, err)
			}
		}
	}
}

// Обрабатываем запрос, отправялем в базу данных, и в маршрутизатор который отправит запрос в соответствующий сервис
func ОбработатьПакет(пакет []byte) {
	Инфо(" ОбработатьПакет пакет %+v \n", пакет)


}

func МаршрутизаторЗапросов (){

}

func ДекодироватьПакет(пакет []byte) {
	Инфо(" ДекодироватьПакет пакет %+v \n", пакет)

	// ⁝  [3]byte{226, 129, 157, 0} - разделить между сообщениями за которым может следовать новое сообщение, первые 4 байта которого определяет длину

	var ЗапросОтКлиента = ЗапросКлиента{
		Запрос:    []byte{},
		ИдКлиента: uuid.UUID{},
	}

	err := jsoniter.Unmarshal(пакет, &ЗапросОтКлиента)
	if err != nil {
		Ошибка("  %+v \n", err)
	}
	Инфо(" ЗапросОтКлиента %+s \n", ЗапросОтКлиента)

}

func обработчикВходящихСоединения(клиент net.Conn) {

	длинаСообщения := make([]byte, 4)
	for {
		прочитаноБайт, err := клиент.Read(длинаСообщения)
		Инфо(" длинаСообщения %+v , прочитаноБайт %+v \n", длинаСообщения, прочитаноБайт)

		if err != nil {
			Ошибка(" прочитаноБайт %+v  err %+v \n", прочитаноБайт, err)
			break
		}

		Инфо(" длинаСообщения %+v , прочитаноБайт %+v \n", длинаСообщения, прочитаноБайт)
		// получаем число байткоторое нужно прочитать
		длинаДанных := binary.LittleEndian.Uint32(длинаСообщения)
		Инфо(" длинаДанных  %+v \n", длинаДанных)

		//читаем количество байт = длинаСообщения
		// var запросКлиента ЗапросКлиента
		пакетЗапроса := make([]byte, длинаДанных)
		прочитаноБайт, err = клиент.Read(пакетЗапроса)
		Инфо("прочитаноБайт  %+s %+v \n", прочитаноБайт, пакетЗапроса)
		if err != nil {
			Ошибка("Ошибка при десериализации структуры: %+v ", err)
		}
		if длинаДанных != uint32(прочитаноБайт) {
			Ошибка("Количество прочитаных байт не ранво длине данных :\n длинаДанных %+v  <> прочитаноБайт %+v ", длинаДанных, прочитаноБайт)
		}

		go ДекодироватьПакет(пакетЗапроса)

	}

}
