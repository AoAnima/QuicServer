package main

import (
	"encoding/binary"
	"fmt"
	"net"
	"net/url"
	"strings"
	"sync"

	. "aoanima.ru/logger"
	"github.com/google/uuid"
	jsoniter "github.com/json-iterator/go"
)

// –∫–ª–∏–µ–Ω—Ç —ç—Ç–æ –∫–∞–∫–æ–π—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–æ–¥–∏–Ω–µ–Ω–∏–µ , –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
func –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–ò—Å—Ö–æ–¥—è—â–∏—Ö–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π(–∫–ª–∏–µ–Ω—Ç net.Conn) { //, –¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–≤–µ—Ç–∞ chan []byte

	go –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ–ò—Å—Ö–æ–¥—è—â–µ–≥–æ–ö–∞–Ω–∞–ª–∞(–∫–ª–∏–µ–Ω—Ç)
	// for –¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–≤–µ—Ç–∞ := range –ö–∞–Ω–∞–ª—ã–ò—Å—Ö–æ–¥—è—â–∏—Ö–°–æ–æ–±—â–µ–Ω–∏–π {
	// 	–ò–Ω—Ñ–æ(" %+v \n", –¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–≤–µ—Ç–∞)

	// 	–ö–∞–Ω–∞–ª—ã–ò—Å—Ö–æ–¥—è—â–∏—Ö–°–æ–æ–±—â–µ–Ω–∏–π[string(–¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–≤–µ—Ç–∞.–°–µ—Ä–≤–∏—Å)]<- –¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–≤–µ—Ç–∞

	// }

}

type –°—Ç—Ä—É–∫—Ç—É—Ä–∞–î–∞–Ω–Ω—ã—Ö struct {
	–û–±—ä–µ–∫—Ç–î–∞–Ω–Ω—ã—Ö interface{}
}
type –û—Ç–ø–µ—á–∞—Ç–æ–∫ struct {
	–°–µ—Ä–≤–∏—Å         string
	–ö–∞–Ω–∞–ª–°–æ–æ–±—â–µ–Ω–∏—è chan interface{}
	–ú–∞—Ä—à—Ä—É—Ç—ã       map[string]map[string]interface{}
	–ö–ª–∏–µ–Ω—Ç–ú—å—é—Ç–µ–∫—Å  sync.Mutex
	// –ö–ª–∏–µ–Ω—Ç        []net.Conn
	–ö–ª–∏–µ–Ω—Ç –ü—É–ª–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π
}
type –ü—É–ª–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π struct {
	–ø—É–ª–ª chan net.Conn
}

//	–û—Ç–ø–µ—á–∞—Ç–æ–∫{
//		–°–µ—Ä–≤–∏—Å: "–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä",
//		–ú–∞—Ä—à—Ä—É—Ç—ã: map[string]map[string]interface{}{
//			"–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É": map[string]interface{}{
//				"HTML": "string",
//				"JSON": "string",
//			},
//		},
//	}
func (–æ *–û—Ç–ø–µ—á–∞—Ç–æ–∫) –ß–∏—Ç–∞—Ç—å–ö–∞–Ω–∞–ª–°–æ–æ–±—â–µ–Ω–∏–π() {
	for –¥–∞–Ω–Ω—ã–µ–ò–∑–ö–∞–Ω–∞–ª–∞ := range –æ.–ö–∞–Ω–∞–ª–°–æ–æ–±—â–µ–Ω–∏—è {
		go –æ.–û—Ç–ø—Ä–∞–≤–∏—Ç—å–°–æ–æ–±—â–µ–Ω–∏–µ(–¥–∞–Ω–Ω—ã–µ–ò–∑–ö–∞–Ω–∞–ª–∞)
	}

}

func (–æ *–û—Ç–ø–µ—á–∞—Ç–æ–∫) –û—Ç–ø—Ä–∞–≤–∏—Ç—å–°–æ–æ–±—â–µ–Ω–∏–µ(–¥–∞–Ω–Ω—ã–µ–ò–∑–ö–∞–Ω–∞–ª–∞ interface{}) {
	–∫–ª–∏–µ–Ω—Ç := <-–æ.–ö–ª–∏–µ–Ω—Ç.–ø—É–ª–ª

	–¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏, err := –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(–¥–∞–Ω–Ω—ã–µ–ò–∑–ö–∞–Ω–∞–ª–∞)
	–ò–Ω—Ñ–æ("–¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏  %+v \n", –¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
	}
	// –ò–Ω—Ñ–æ("–∫–ª–∏–µ–Ω—Ç  %+v \n", –∫–ª–∏–µ–Ω—Ç)
	–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç, err := –∫–ª–∏–µ–Ω—Ç.Write(–¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏)
	–ò–Ω—Ñ–æ(" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç –∫–ª–∏–µ–Ω—Ç—É  %+v \n", –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v  –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç %+v \n", err, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç)
	} else {
		–æ.–ö–ª–∏–µ–Ω—Ç.–ø—É–ª–ª <- –∫–ª–∏–µ–Ω—Ç
	}

}
func (–æ *–û—Ç–ø–µ—á–∞—Ç–æ–∫) –ü–æ–ª—É—á–∏—Ç—å–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ() {

}

var –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–ú—å—é—Ç–µ–∫—Å sync.Mutex
var –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä = make(map[string]*–û—Ç–ø–µ—á–∞—Ç–æ–∫)

// –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä = map[string]*–û—Ç–ø–µ—á–∞—Ç–æ–∫{
// 	"–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É": –û—Ç–ø–µ—á–∞—Ç–æ–∫{
// 		–°–µ—Ä–≤–∏—Å: "–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä",
// 		–ö–∞–Ω–∞–ª–û—Ç–≤–µ—Ç–∞: make(chan interface{}),
// 		–ú–∞—Ä—à—Ä—É—Ç—ã: map[string]map[string]interface{}{
// 			"–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É": map[string]interface{}{
// 				"HTML": "string",
// 				"JSON": "string",
// 			},
// 		},
// 	},
// }

func –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–°–µ—Ä–≤–∏—Å–∞(–æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞ *–û—Ç–ø–µ—á–∞—Ç–æ–∫, –ö–ª–∏–µ–Ω—Ç net.Conn) {

	for –º–∞—Ä—à—Ä—É—Ç, _ := range –æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞.–ú–∞—Ä—à—Ä—É—Ç—ã {
		// –ø—Ä–æ–≤–µ—Ä–∏–º –≤–¥—Ä—É–≥ —ç—Ç–æ —Å–µ—Ä–≤–∏—Å —Ö—ä–æ—Ç—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –µ—â—ë –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ , –µ—Å–ª–∏ –≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–µ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞, —Ç–æ –¥–æ–±–∞–≤–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –º–∞—Ä—à—Ä—É—Ç
		if –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π–°–µ—Ä–≤–∏—Å, –µ—Å—Ç—å := –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä[–º–∞—Ä—à—Ä—É—Ç]; –µ—Å—Ç—å {
			–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π–°–µ—Ä–≤–∏—Å.–ö–ª–∏–µ–Ω—Ç–ú—å—é—Ç–µ–∫—Å.Lock()
			–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π–°–µ—Ä–≤–∏—Å.–ö–ª–∏–µ–Ω—Ç.–ø—É–ª–ª <- –ö–ª–∏–µ–Ω—Ç
			// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π–°–µ—Ä–≤–∏—Å.–ö–ª–∏–µ–Ω—Ç=append(–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π–°–µ—Ä–≤–∏—Å.–ö–ª–∏–µ–Ω—Ç, –ö–ª–∏–µ–Ω—Ç)
			–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π–°–µ—Ä–≤–∏—Å.–ö–ª–∏–µ–Ω—Ç–ú—å—é—Ç–µ–∫—Å.Unlock()
		} else {

			–æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞.–ö–ª–∏–µ–Ω—Ç.–ø—É–ª–ª = make(chan net.Conn, 10)
			// –æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞.–ö–ª–∏–µ–Ω—Ç = append(–æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞.–ö–ª–∏–µ–Ω—Ç, –ö–ª–∏–µ–Ω—Ç)
			–æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞.–ö–∞–Ω–∞–ª–°–æ–æ–±—â–µ–Ω–∏—è = make(chan interface{}, 10)
			–æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞.–ö–ª–∏–µ–Ω—Ç.–ø—É–ª–ª <- –ö–ª–∏–µ–Ω—Ç

			–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–ú—å—é—Ç–µ–∫—Å.Lock()
			–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä[–º–∞—Ä—à—Ä—É—Ç] = –æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞
			–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–ú—å—é—Ç–µ–∫—Å.Unlock()
			go –æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞.–ß–∏—Ç–∞—Ç—å–ö–∞–Ω–∞–ª–°–æ–æ–±—â–µ–Ω–∏–π()
		}

	}
	–ò–Ω—Ñ–æ(" –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä %+v \n", –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä)
}

// –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø—É–ª –°–µ—Ä–≤–∏—Å–æ–≤/ –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ, –æ–Ω –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç !!!
// –Ω–∞–ø—Ä–º–∏–µ—Ä —Å–µ—Ä–≤–∏—Å –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã  –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ /catalog
func –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ–ò—Å—Ö–æ–¥—è—â–µ–≥–æ–ö–∞–Ω–∞–ª–∞(–∫–ª–∏–µ–Ω—Ç net.Conn) {
	–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è := make([]byte, 4)
	// —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ := [4]byte{}
	var –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç int
	var err error
	for {
		// –ø–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è
		–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err = –∫–ª–∏–µ–Ω—Ç.Read(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
			break
		}
		–ò–Ω—Ñ–æ("  %+v \n", –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç)
		// —á–∏—Ç–∞–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		// —Å–æ–∑–¥–∞–¥–∏–º –±—É—Ñ–µ—Ä –∫—É–¥–∞ –ø–æ–º–µ—Å—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		// —Å–æ–æ–±—â–µ–Ω–∏–µ–†—É–∫–æ–ø–æ–∂–∞—Ç–∏—è := make([]byte, binary.LittleEndian.Uint32(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è))

		// copy(—Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ[0:], –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è[:4])

		// if –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è–§–∏–∫—Å == [4]byte{240, 159, 164, 157} { //"ü§ù"
		// 	–ò–Ω—Ñ–æ(" %+v \n", string(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è))
		—Å–æ–æ–±—â–µ–Ω–∏–µ–û—Ç–°–µ—Ä–≤–∏—Å–∞ := make([]byte, binary.LittleEndian.Uint32(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è))
		_, err = –∫–ª–∏–µ–Ω—Ç.Read(—Å–æ–æ–±—â–µ–Ω–∏–µ–û—Ç–°–µ—Ä–≤–∏—Å–∞)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
		}

		–û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞ := –û—Ç–ø–µ—á–∞—Ç–æ–∫{}

		err := jsoniter.Unmarshal(—Å–æ–æ–±—â–µ–Ω–∏–µ–û—Ç–°–µ—Ä–≤–∏—Å–∞, &–û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
		}

		–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–°–µ—Ä–≤–∏—Å–∞(&–û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞, –∫–ª–∏–µ–Ω—Ç)

	}
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤—è–ª–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏ –≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞–ø—Ä–æ—Å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
func –û–±—Ä–∞–±–æ—Ç–∞—Ç—å–ü–∞–∫–µ—Ç(–ø–∞–∫–µ—Ç []byte) {
	–ò–Ω—Ñ–æ(" –û–±—Ä–∞–±–æ—Ç–∞—Ç—å–ü–∞–∫–µ—Ç –ø–∞–∫–µ—Ç %+v \n", –ø–∞–∫–µ—Ç)

}

func –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–ó–∞–ø—Ä–æ—Å–æ–≤() {

}
func –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(–¥–∞–Ω–Ω—ã–µ–î–ª—è–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è interface{}) ([]byte, error) {

	b, err := jsoniter.Marshal(&–¥–∞–Ω–Ω—ã–µ–î–ª—è–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
		return nil, err
	}
	–¥–∞–Ω–Ω—ã–µ := make([]byte, len(b)+4)
	binary.LittleEndian.PutUint32(–¥–∞–Ω–Ω—ã–µ, uint32(len(b)))
	copy(–¥–∞–Ω–Ω—ã–µ[4:], b)
	return –¥–∞–Ω–Ω—ã–µ, nil

}
func –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å–ü–∞–∫–µ—Ç(–ø–∞–∫–µ—Ç []byte) {
	–ò–Ω—Ñ–æ(" –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å–ü–∞–∫–µ—Ç –ø–∞–∫–µ—Ç %+s \n", –ø–∞–∫–µ—Ç)

	// ‚Åù  [3]byte{226, 129, 157, 0} - —Ä–∞–∑–¥–µ–ª–∏—Ç—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω—É
	// –ø–æ—á–º—É –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞, —Ç—É—Ç –º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–∞–∫–∏—Ö —Ç–æ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –æ—Ç–≤–µ—Ç–æ–º, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.....
	// –ó–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –æ—Ç –∫–∞–∫–æ–≥–æ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞—á–∞–ª–∞, –∞ –ø–æ—Ç–æ–º —É–∂–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É ?????

	var –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞ = –ó–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞{
		–°–µ—Ä–≤–∏—Å:    []byte{},
		–ó–∞–ø—Ä–æ—Å:    –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞{},
		–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: uuid.UUID{},
	}

	err := jsoniter.Unmarshal(–ø–∞–∫–µ—Ç, &–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
	}
	–ò–Ω—Ñ–æ(" –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞ %+s \n", –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞)

	go –°–æ—Ö—Ä–∞–Ω–∏—Ç—å–ó–∞–ø—Ä–æ—Å(–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞)

	–ê–Ω–∞–ª–∏–∑–ó–∞–ø—Ä–æ—Å–∞(&–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞)

}

var –°–ø–∏—Å–æ–∫–°–µ—Ä–≤–∏—Å–æ–≤ = map[string]string{}

func –ê–Ω–∞–ª–∏–∑–ó–∞–ø—Ä–æ—Å–∞(–ó–∞–ø—Ä–æ—Å *–ó–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞) {

	// –°—Ç—Ä–æ–∫–∞–ó–∞–ø—Ä–æ—Å–∞.–ó–∞–ø—Ä–æ—Å = string(–°—Ç—Ä–æ–∫–∞–ó–∞–ø—Ä–æ—Å–∞.–ó–∞–ø—Ä–æ—Å)
	–ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞, err := url.Parse(–ó–∞–ø—Ä–æ—Å.–ó–∞–ø—Ä–æ—Å.–°—Ç—Ä–æ–∫–∞)
	// –ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞, err := url.ParseQuery(string(–°—Ç—Ä–æ–∫–∞–ó–∞–ø—Ä–æ—Å–∞.–ó–∞–ø—Ä–æ—Å.–°—Ç—Ä–æ–∫–∞))
	–ò–Ω—Ñ–æ(" –ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞ %+v \n", –ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –°—Ç—Ä–æ–∫–∞–ó–∞–ø—Ä–æ—Å–∞ –∑–∞–ø—Ä–æ—Å–∞:", err)
		return
	}
	// –ê–Ω–∞–ø

	–ò–Ω—Ñ–æ("–°—Ç—Ä–æ–∫–∞–ó–∞–ø—Ä–æ—Å–∞.–ó–∞–ø—Ä–æ—Å.–§–æ—Ä–º–∞ %+v \n", –ó–∞–ø—Ä–æ—Å.–ó–∞–ø—Ä–æ—Å.–§–æ—Ä–º–∞)

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
	// –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–∫–∞ category - –∑–Ω–∞–∏—á—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

	–û—Ç–ø—Ä–∞–≤–∏—Ç–ó–∞–ø—Ä–æ—Å–í–°–µ—Ä–≤–∏—Å(–ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞, –ó–∞–ø—Ä–æ—Å)

}

func –û—Ç–ø—Ä–∞–≤–∏—Ç–ó–∞–ø—Ä–æ—Å–í–°–µ—Ä–≤–∏—Å(–ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞ *url.URL, –°—Ç—Ä–æ–∫–∞–ó–∞–ø—Ä–æ—Å–∞ *–ó–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞) {
	–ò–Ω—Ñ–æ("–û—Ç–ø—Ä–∞–≤–∏—Ç–ó–∞–ø—Ä–æ—Å–í–°–µ—Ä–≤–∏—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞  %+v \n", –ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞)
	–ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞.Path = strings.Trim(–ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞.Path, "/")
	–º–∞—Ä—à—Ä—É—Ç := strings.Split(–ø–∞—Ä–∞–º–µ—Ç—Ä—ã–ó–∞–ø—Ä–æ—Å–∞.Path, "/")

	–ò–Ω—Ñ–æ(" –º–∞—Ä—à—Ä—É—Ç[0] %+v \n", –º–∞—Ä—à—Ä—É—Ç[0])

	if –°–µ—Ä–≤–∏—Å, –µ—Å—Ç—å := –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä[–º–∞—Ä—à—Ä—É—Ç[0]]; –µ—Å—Ç—å {
		–ò–Ω—Ñ–æ(" –°–µ—Ä–≤–∏—Å %+v \n", –°–µ—Ä–≤–∏—Å)
		–°–µ—Ä–≤–∏—Å.–ö–∞–Ω–∞–ª–°–æ–æ–±—â–µ–Ω–∏—è <- –°—Ç—Ä–æ–∫–∞–ó–∞–ø—Ä–æ—Å–∞
	} else {

		–û—à–∏–±–∫–∞(" –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è  %+v –µ—Å—Ç—å %+v\n", –º–∞—Ä—à—Ä—É—Ç, –µ—Å—Ç—å)
		–û—à–∏–±–∫–∞("–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä  %+v \n", –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä)

	}

}

func –°–æ—Ö—Ä–∞–Ω–∏—Ç—å–ó–∞–ø—Ä–æ—Å(–∑–∞–ø—Ä–æ—Å –ó–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞) {
	sql := fmt.Sprintf("INSERT INTO querys (id, query, service) VALUES (%s, %s, %s)", –∑–∞–ø—Ä–æ—Å.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞.String(), –∑–∞–ø—Ä–æ—Å.–ó–∞–ø—Ä–æ—Å, –∑–∞–ø—Ä–æ—Å.–°–µ—Ä–≤–∏—Å)
	–ò–Ω—Ñ–æ(" –ü–∏—à–µ–º –≤ –±–¥ >> %+v \n", sql)

}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤, –≤ –æ—Ç–≤–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
func –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–í—Ö–æ–¥—è—â–∏—Ö–°–æ–æ–±—â–µ–Ω–∏–π(–∫–ª–∏–µ–Ω—Ç net.Conn) {

	–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è := make([]byte, 4)
	var –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç int
	var err error
	for {
		–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err = –∫–ª–∏–µ–Ω—Ç.Read(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è)
		–ò–Ω—Ñ–æ(" –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è %+v , –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v \n", –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç)

		if err != nil {
			–û—à–∏–±–∫–∞(" –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v  err %+v \n", –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err)
			break
		}

		// –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –±–∞–π—Ç–∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
		–¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö := binary.LittleEndian.Uint32(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è)

		–ò–Ω—Ñ–æ(" –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö  %+v \n", –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö)
		–ò–Ω—Ñ–æ(" –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è %+v ,  \n –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v ,  \n –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö %+v \n", –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è,
			–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö)

		//—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç = –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è
		// var –∑–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞ –ó–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞
		–ø–∞–∫–µ—Ç–ó–∞–ø—Ä–æ—Å–∞ := make([]byte, –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö)
		–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err = –∫–ª–∏–µ–Ω—Ç.Read(–ø–∞–∫–µ—Ç–ó–∞–ø—Ä–æ—Å–∞)
		if err != nil {
			–û—à–∏–±–∫–∞("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %+v ", err)
		}
		if –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö != uint32(–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç) {
			–û—à–∏–±–∫–∞("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã—Ö –±–∞–π—Ç –Ω–µ —Ä–∞–Ω–≤–æ –¥–ª–∏–Ω–µ –¥–∞–Ω–Ω—ã—Ö :\n –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö %+v  <> –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v ", –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç)
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –ø–∞–∫–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é –≥–æ—Ä—É—Ç–∏–Ω—É, —Ç.–∫. –≤ –æ–∂–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥—Ç –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω

		go –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å–ü–∞–∫–µ—Ç(–ø–∞–∫–µ—Ç–ó–∞–ø—Ä–æ—Å–∞)

	}

}

// func –¢–µ—Å—Ç–í–•–æ–¥—è—â–∏—Ö–°–æ–æ–±—â–µ–Ω–∏–π–°–Ω–∏–∑–∫–æ–π–°–∫–æ—Ä–æ—Å—Ç—å—é(–∫–ª–∏–µ–Ω—Ç net.Conn) {
// 	–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è := make([]byte, 100)
// 	var –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç int
// 	var err error
// 	–í—Å–µ–≥–æ–ü—Ä–æ—á–∏—Ç–∞–Ω–æ := 0
// 	socket := –∫–ª–∏–µ–Ω—Ç
// 	fd, err := socket.File()

// 	sock := syscall.Handle(fd.Fd())
// 	level := syscall.SOL_SOCKET
// 	name := syscall.SO_RCVBUF

// 	in, err := syscall.GetsockoptInt(sock, level, name)
// 	if err != nil {
// 		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ü–∏–∏ —Å–æ–∫–µ—Ç–∞:", err)
// 		return
// 	}
// 	–ò–Ω—Ñ–æ(" in %+v \n", in)
// 	for {
// 		–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err = –∫–ª–∏–µ–Ω—Ç.Read(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è)
// 		if err != nil {
// 			–û—à–∏–±–∫–∞("  %+v \n", err.Error())
// 		}

// 		–í—Å–µ–≥–æ–ü—Ä–æ—á–∏—Ç–∞–Ω–æ = –í—Å–µ–≥–æ–ü—Ä–æ—á–∏—Ç–∞–Ω–æ + –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç
// 		–ò–Ω—Ñ–æ(" –í—Å–µ–≥–æ–ü—Ä–æ—á–∏—Ç–∞–Ω–æ %+v , –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v \n", –í—Å–µ–≥–æ–ü—Ä–æ—á–∏—Ç–∞–Ω–æ, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç)
// 		time.Sleep(1 * time.Second)
// 	}
// }
