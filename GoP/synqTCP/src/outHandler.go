package main

import (
	"encoding/binary"
	"net"

	. "aoanima.ru/logger"
	jsoniter "github.com/json-iterator/go"
)

func –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–ò—Å—Ö–æ–¥—è—â–∏—Ö–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π(–∫–ª–∏–µ–Ω—Ç net.Conn) { //, –¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–≤–µ—Ç–∞ chan []byte
	go –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ–ò—Å—Ö–æ–¥—è—â–µ–≥–æ–ö–∞–Ω–∞–ª–∞(–∫–ª–∏–µ–Ω—Ç)
}

func (–æ *–û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞) –ß–∏—Ç–∞—Ç—å–ö–∞–Ω–∞–ª–°–æ–æ–±—â–µ–Ω–∏–π() {
	for –¥–∞–Ω–Ω—ã–µ–ò–∑–ö–∞–Ω–∞–ª–∞ := range –æ.–ö–∞–Ω–∞–ª–°–æ–æ–±—â–µ–Ω–∏—è {
		go –æ.–û—Ç–ø—Ä–∞–≤–∏—Ç—å–°–æ–æ–±—â–µ–Ω–∏–µ–í–°–µ—Ä–≤–∏—Å(–¥–∞–Ω–Ω—ã–µ–ò–∑–ö–∞–Ω–∞–ª–∞)
	}

}

func (–æ *–û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞) –û—Ç–ø—Ä–∞–≤–∏—Ç—å–°–æ–æ–±—â–µ–Ω–∏–µ–í–°–µ—Ä–≤–∏—Å(–¥–∞–Ω–Ω—ã–µ–ò–∑–ö–∞–Ω–∞–ª–∞ interface{}) {
	// –±–µ—Ä—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ - —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ –ø—É–ª–ª —Å–æ–µ–¥–∏–µ–Ω–∏–µ–Ω–∏–π

	// –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É

	–∫–ª–∏–µ–Ω—Ç := <-–æ.–ö–ª–∏–µ–Ω—Ç.–ø—É–ª–ª

	–ò–Ω—Ñ–æ(" –≤–∑—è–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–ª–∞  \n")
	
	–¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏, err := –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(–¥–∞–Ω–Ω—ã–µ–ò–∑–ö–∞–Ω–∞–ª–∞)

	–ò–Ω—Ñ–æ("–¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏  %+v \n", –¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
	}
	// –ò–Ω—Ñ–æ("–∫–ª–∏–µ–Ω—Ç  %+v \n", –∫–ª–∏–µ–Ω—Ç)

	–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç, err := –∫–ª–∏–µ–Ω—Ç.Write(–¥–∞–Ω–Ω—ã–µ–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏)


	–ò–Ω—Ñ–æ(" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç –∫–ª–∏–µ–Ω—Ç—É  %+v \n", –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v  –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç %+v \n", err, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–ë–∞–π—Ç)
	} else {

		–æ.–ö–ª–∏–µ–Ω—Ç.–ø—É–ª–ª <- –∫–ª–∏–µ–Ω—Ç
		–ò–Ω—Ñ–æ(" –≤–æ–∑–≤—Ä–∞—Ç–∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª–ª  \n")
	}

}

// –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø—É–ª –°–µ—Ä–≤–∏—Å–æ–≤/ –∫–æ–≥–¥–∞ —Å–µ—Ä–≤–∏—Å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ, –æ–Ω –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç !!!
// –Ω–∞–ø—Ä–º–∏–µ—Ä —Å–µ—Ä–≤–∏—Å –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã  –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ /catalog /product ...
func –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ–ò—Å—Ö–æ–¥—è—â–µ–≥–æ–ö–∞–Ω–∞–ª–∞(–∫–ª–∏–µ–Ω—Ç net.Conn) {
	–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è := make([]byte, 4)
	// —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ := [4]byte{}
	var –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç int
	var err error
	for {
		// –ø–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è
		–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err = –∫–ª–∏–µ–Ω—Ç.Read(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
			break
		}
		–ò–Ω—Ñ–æ("  %+v \n", –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç)
		// —á–∏—Ç–∞–µ–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		// —Å–æ–∑–¥–∞–¥–∏–º –±—É—Ñ–µ—Ä –∫—É–¥–∞ –ø–æ–º–µ—Å—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		// —Å–æ–æ–±—â–µ–Ω–∏–µ–†—É–∫–æ–ø–æ–∂–∞—Ç–∏—è := make([]byte, binary.LittleEndian.Uint32(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è))

		// copy(—Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ[0:], –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è[:4])

		// if –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è–§–∏–∫—Å == [4]byte{240, 159, 164, 157} { //"ü§ù"
		// 	–ò–Ω—Ñ–æ(" %+v \n", string(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è))
		—Å–æ–æ–±—â–µ–Ω–∏–µ–û—Ç–°–µ—Ä–≤–∏—Å–∞ := make([]byte, binary.LittleEndian.Uint32(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è))
		_, err = –∫–ª–∏–µ–Ω—Ç.Read(—Å–æ–æ–±—â–µ–Ω–∏–µ–û—Ç–°–µ—Ä–≤–∏—Å–∞)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
		}

		–û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞ := –û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞{}

		err := jsoniter.Unmarshal(—Å–æ–æ–±—â–µ–Ω–∏–µ–û—Ç–°–µ—Ä–≤–∏—Å–∞, &–û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
		}

		–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–°–µ—Ä–≤–∏—Å–∞(&–û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞, –∫–ª–∏–µ–Ω—Ç)

	}
}
