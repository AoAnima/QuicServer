package main

import (
	"encoding/binary"
	"fmt"
	"net/url"

	connector "aoanima.ru/connector"
	. "aoanima.ru/logger"

	jsoniter "github.com/json-iterator/go"
)

// клиент это какойто сервис который установил содинение , для каждого ответа должен быть свой канал, в который будет писаться сообщение

func Обработать(запрос connector.Сообщение, ошибкаДекодирования error) ([]byte, error) {

	return []byte{}, nil
}

func Кодировать(данныеДляКодирования interface{}) ([]byte, error) {

	b, err := jsoniter.Marshal(&данныеДляКодирования)
	if err != nil {
		Ошибка("  %+v \n", err)
		return nil, err
	}
	данные := make([]byte, len(b)+4)
	binary.LittleEndian.PutUint32(данные, uint32(len(b)))
	copy(данные[4:], b)
	return данные, nil

}

func ДекодироватьПакет(пакет []byte) (connector.Сообщение, error) {
	Инфо(" ДекодироватьПакет пакет %+s \n", пакет)

	// ⁝  [3]byte{226, 129, 157, 0} - разделить между сообщениями за которым может следовать новое сообщение, первые 4 байта которого определяет длину
	// почму запрос клиента, тут могут прийти данные от каких то сервисов с ответом, результатом обработка запроса.....
	// Значит нужно определять от какого из сервисов пришёл запрос для начала, а потом уже декодировать данные в соответсвующую структуру ?????

	var ДанныеВОбработку = connector.Сообщение{}

	err := jsoniter.Unmarshal(пакет, &ДанныеВОбработку)
	if err != nil {
		Ошибка("  %+v \n", err)
		return connector.Сообщение{}, err
	}
	Инфо(" ЗапросОтКлиента %+s \n", ДанныеВОбработку)

	go СохранитьЗапрос(&ДанныеВОбработку)

	return ДанныеВОбработку, nil

}

func АнализЗапроса(Запрос *connector.Сообщение) {

	// СтрокаЗапроса.Запрос = string(СтрокаЗапроса.Запрос)
	параметрыЗапроса, err := url.Parse(Запрос.Запрос.СтрокаЗапроса)
	// параметрыЗапроса, err := url.ParseQuery(string(СтрокаЗапроса.Запрос.Строка))
	Инфо(" параметрыЗапроса %+v \n", параметрыЗапроса)
	if err != nil {
		fmt.Println("Ошибка при парсинге СтрокаЗапроса запроса:", err)
		return
	}
	// Анап

	Инфо("СтрокаЗапроса.Запрос.Форма %+v \n", Запрос.Запрос.Форма)

	// Анализируем в какой сервис отправить запрос
	// например присутствует строка category - знаичт отправляем в сервис отвечающий за категории

}

func СохранитьЗапрос(запрос *connector.Сообщение) {

	// sql := fmt.Sprintf("INSERT INTO querys (id, query, service) VALUES (%s, %s, %s)", запрос.ИдКлиента.String(), запрос.Запрос, запрос.Сервис)
	Инфо(" Пишем в бд >> %+v \n", запрос)

}
