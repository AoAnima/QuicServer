package main

import (
	"net/http"

	_ "net/http/pprof"

	. "aoanima.ru/ConnQuic"
	. "aoanima.ru/logger"
	"github.com/quic-go/quic-go"
)

// type ОтветКлиенту struct {
// 	Сервис    []byte
// 	Ответ     []byte
// 	ИдКлиента []byte
// }

// type ЗапросКлиента struct {
// 	Запрос    ЗапросОтКлиента
// 	ИдКлиента uuid.UUID
// 	ТокенКлиента []byte // JWT сериализованный
// }
// type ЗапросОтКлиента struct {
// 	Строка string
// 	Форма  map[string][]string
// 	Файл   string
// }

func main() {
	go func() {
		http.ListenAndServe("localhost:6061", nil)
	}()
	// Вероятно нужно откуда то получить список Сервисов с которомы предстоит общаться
	//  Или !!!! ОбработчикВходящихСообщений

	// Сервис := connector.Отпечаток{
	// 	Сервис: "Каталог",
	// 	Маршруты: map[string]*connector.СтруктураМаршрута{
	// 		"/": {
	// 			Запрос: map[string]interface{}{
	// 				"ТипЗпроса":     "int",    // в заивисмости от типа запроса например ajax или обычный request будет возвращён ответ...
	// 				"СтрокаЗапроса": "string", // url Path Query
	// 				"Форма":         "map[string][]string",
	// 				"Файл":          "string",
	// 			},
	// 			Ответ: map[string]interface{}{
	// 				"HTML": "string",
	// 				"JSON": "string",
	// 			},
	// 		},
	// 		"catalog": {
	// 			Запрос: map[string]interface{}{
	// 				"ТипЗпроса":     "int",    // в заивисмости от типа запроса например ajax или обычный request будет возвращён ответ...
	// 				"СтрокаЗапроса": "string", // url Path Query
	// 				"Форма":         "map[string][]string",
	// 				"Файл":          "string",
	// 			},
	// 			Ответ: map[string]interface{}{
	// 				"HTML": "string",
	// 				"JSON": "string",
	// 			},
	// 		},
	// 		"product": {
	// 			Запрос: map[string]interface{}{
	// 				"ТипЗпроса":      "int",    // в заивисмости от типа запроса например ajax или обычный request будет возвращён ответ...
	// 				"СтрокаЗапросаы": "string", // url Path Query
	// 				"Форма":          "map[string][]string",
	// 				"Файл":           "string",
	// 			},
	// 			Ответ: map[string]interface{}{
	// 				"HTML": "string",
	// 				"JSON": "string",
	// 			},
	// 		},
	// 	},
	// }

	сообщение := Сообщение{
		Сервис:      "Каталог",
		Регистрация: true,
		Маршруты:    []Маршрут{"/", "catalog", "product"},
	}
	сервер := Сервер{
		Адрес: "localhost:4242",
		Имя:   "БрокерСообщений",
	}
	картаСессий := КартаСессий{}
	Клиент := Клиент{
		сервер: &картаСессий,
	}
	Клиент.Соединиться(сервер, ОбработатьЗапрос)
	поток := Клиент[сервер].ОчередьПотоков.Взять()
	с, err := Кодировать(сообщение)
	if err != nil {
		Ошибка("  %+v \n", err)
	} else {
		поток.Write(с)
	}

}

func ОбработатьЗапрос(поток quic.Stream, сообщение Сообщение) {

	Инфо(" ОбработатьЗапрос %+v \n", сообщение)

	Ответ, err := Обработать(сообщение)
	if err != nil {
		Ошибка("  %+v \n", err)
	}
	// TODO: Реализум логику обработки запроса от клиента, и генерацию ответа
	ответ, err := Кодировать(Ответ)
	if err != nil {
		Ошибка("  %+v \n", err)
	}
	поток.Write(ответ)
	// ОтветКлиенту := ВходящееСообщение
	// каналОтправкиСообщений <- Ответ
}
