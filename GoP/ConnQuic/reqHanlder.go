package ConnQuic

import (
	"crypto/tls"
	"crypto/x509"
	"encoding/binary"
	"os"
	"time"

	jsoniter "github.com/json-iterator/go"

	. "aoanima.ru/logger"
	"github.com/google/uuid"
)

// –∫–∞–Ω–∞–ª–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π - –∏—Å–ø–æ–ª–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É

// func –ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π(–∫–∞–Ω–∞–ª–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π chan []byte, –∞–¥—Ä–µ—Å string, –ø–æ—Ä—Ç string, –æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞ –û—Ç–ø–µ—á–∞—Ç–æ–∫) {
// 	caCert, err := os.ReadFile("cert/ca.crt")

// 	if err != nil {
// 		–û—à–∏–±–∫–∞(" %s ", err)
// 	}

// 	caCertPool := x509.NewCertPool()
// 	ok := caCertPool.AppendCertsFromPEM(caCert)
// 	–ò–Ω—Ñ–æ("–ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω?  %v ", ok)

// 	cert, err := tls.LoadX509KeyPair("cert/client.crt", "cert/client.key")
// 	if err != nil {
// 		–û—à–∏–±–∫–∞(" %s", err)
// 	}

// 	tlsConfig := &tls.Config{
// 		RootCAs:      caCertPool,
// 		Certificates: []tls.Certificate{cert},
// 	}

// 	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TCP-—Å–µ—Ä–≤–µ—Ä—É —Å TLS –Ω–∞ localhost:8080
// 	–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫ := 500
// 	–∑–∞–¥–µ—Ä–∂–∫–∞ := 1 * time.Second
// 	var —Å–µ—Ä–≤–µ—Ä *tls.Conn
// 	var errDial error
// 	for –ø–æ–ø—ã—Ç–∫–∞ := 1; –ø–æ–ø—ã—Ç–∫–∞ <= –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫; –ø–æ–ø—ã—Ç–∫–∞++ {
// 		—Å–µ—Ä–≤–µ—Ä, errDial = tls.Dial("tcp", –∞–¥—Ä–µ—Å+":"+–ø–æ—Ä—Ç, tlsConfig)
// 		if errDial != nil {
// 			–û—à–∏–±–∫–∞("  %+v \n", err)
// 			time.Sleep(–∑–∞–¥–µ—Ä–∂–∫–∞)
// 		} else {
// 			break
// 		}
// 	}
// 	go –ß–∏—Ç–∞—Ç—å–°–æ–æ–±—â–µ–Ω–∏—è(—Å–µ—Ä–≤–µ—Ä, –∫–∞–Ω–∞–ª–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π)
// 	–†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ(—Å–µ—Ä–≤–µ—Ä, –æ—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞)
// }

func –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ(—Å–µ—Ä–≤–µ—Ä *tls.Conn, –û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞ –û—Ç–ø–µ—á–∞—Ç–æ–∫) {
	// –±—É—Ñ–µ—Ä := new(bytes.Buffer)
	// –ó–∞–ø—Ä–æ—Å{
	// 	–°–µ—Ä–≤–∏—Å:    []byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"),
	// 	–ó–∞–ø—Ä–æ—Å:    "ü§ù",
	// 	–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: –£–∏–¥(),
	// }

	// –ò–Ω—Ñ–æ("  %+v %+v \n", "ü§ù", []byte("ü§ù"), len([]byte("ü§ù")))
	// binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, [4]byte{240, 159, 164, 157}) // [4]byte{240, 159, 164, 157} = "ü§ù"

	// –ë—É–¥–µ—Ç –æ–ø–∏—Å–∞—ã–≤–∞—Ç—å –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∫–æ–º –≤–∏–¥–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
	//–Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–∏—Å –ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä , –∏–º–µ–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –û—Ç–≤–µ—Ç–ö–õ–∏–µ–Ω—Ç—É : –î–ª—è–≠—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –µ–º—É –Ω—É–∂–µ–Ω –ò–¥–ö–ª–∏–µ–Ω—Ç–∞, –∏ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ HTML —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ json

	// –ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä := –û—Ç–ø–µ—á–∞—Ç–æ–∫{
	// 	–°–µ—Ä–≤–∏—Å: "–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä",
	// 	–ú–∞—Ä—à—Ä—É—Ç—ã: map[string]map[string]interface{}{
	// 		"–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É": {
	// 			"HTML": "string",
	// 			"JSON": "string",
	// 		},
	// 		"catalog": {
	// 			"HTML": "string",
	// 			"JSON": "string",
	// 		},
	// 	},
	// }
	// –ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä := –û—Ç–ø–µ—á–∞—Ç–æ–∫{
	// 	–°–µ—Ä–≤–∏—Å: "–ö–∞—Ç–∞–ª–æ–≥–°–µ—Ä–≤–∏—Å",
	// 	–ú–∞—Ä—à—Ä—É—Ç—ã: map[string]map[string]interface{}{
	// 		"catalog": map[string]interface{}{
	// 			"–ó–∞–ø—Ä–æ—Å": "string",
	// 		}
	//
	// 	},
	// }

	–¥–∞–Ω–Ω—ã–µ–í–û—Ç–ø—Ä–∞–≤–∫—É, err := –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(–û—Ç–ø–µ—á–∞—Ç–æ–∫–°–µ—Ä–≤–∏—Å–∞)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
	}
	// binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, int32(len([]byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"))))
	// binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, []byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"))
	—Å–µ—Ä–≤–µ—Ä.Write(–¥–∞–Ω–Ω—ã–µ–í–û—Ç–ø—Ä–∞–≤–∫—É)

}

// func –ß–∏—Ç–∞—Ç—å–°–æ–æ–±—â–µ–Ω–∏—è(—Å–µ—Ä–≤–µ—Ä *tls.Conn, –∫–∞–Ω–∞–ª–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π chan []byte) {

// 	–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è := make([]byte, 4)
// 	var –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç int
// 	var err error
// 	for {
// 		–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err = —Å–µ—Ä–≤–µ—Ä.Read(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è)
// 		–ò–Ω—Ñ–æ(" –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è %+v , –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v \n", –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç)

// 		if err != nil {
// 			–û—à–∏–±–∫–∞(" –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v  err %+v \n", –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err)
// 			break
// 		}

// 		// –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –±–∞–π—Ç–∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
// 		–¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö := binary.LittleEndian.Uint32(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è)

// 		–ò–Ω—Ñ–æ(" –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö  %+v \n", –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö)
// 		–ò–Ω—Ñ–æ(" –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è %+v ,  \n –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v ,  \n –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö %+v \n", –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è,
// 			–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö)

// 		//—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç = –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è
// 		// var –∑–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞ –ó–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞
// 		–ø–∞–∫–µ—Ç–û—Ç–≤–µ—Ç–∞ := make([]byte, –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö)
// 		–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err = —Å–µ—Ä–≤–µ—Ä.Read(–ø–∞–∫–µ—Ç–û—Ç–≤–µ—Ç–∞)
// 		if err != nil {
// 			–û—à–∏–±–∫–∞("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %+v ", err)
// 		}
// 		if –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö != uint32(–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç) {
// 			–û—à–∏–±–∫–∞("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã—Ö –±–∞–π—Ç –Ω–µ —Ä–∞–Ω–≤–æ –¥–ª–∏–Ω–µ –¥–∞–Ω–Ω—ã—Ö :\n –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö %+v  <> –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v ", –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç)
// 		}

// 		–∫–∞–Ω–∞–ª–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π <- –ø–∞–∫–µ—Ç–û—Ç–≤–µ—Ç–∞

// 	}

// }

func –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏–°–æ–æ–±—â–µ–Ω–∏–π(–∫–∞–Ω–∞–ª–û—Ç–ø—Ä–∞–≤–∫–∏–û—Ç–≤–µ—Ç–æ–≤ chan []byte, –∞–¥—Ä–µ—Å string, –ø–æ—Ä—Ç string) {
	caCert, err := os.ReadFile("cert/ca.crt")

	if err != nil {
		–û—à–∏–±–∫–∞(" %s ", err)
	}

	caCertPool := x509.NewCertPool()
	ok := caCertPool.AppendCertsFromPEM(caCert)
	–ò–Ω—Ñ–æ("–ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω?  %v ", ok)

	cert, err := tls.LoadX509KeyPair("cert/client.crt", "cert/client.key")
	if err != nil {
		–û—à–∏–±–∫–∞(" %s", err)
	}

	tlsConfig := &tls.Config{
		RootCAs:      caCertPool,
		Certificates: []tls.Certificate{cert},
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TCP-—Å–µ—Ä–≤–µ—Ä—É —Å TLS –Ω–∞ localhost:8080
	–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫ := 500
	–∑–∞–¥–µ—Ä–∂–∫–∞ := 1 * time.Second
	var —Å–µ—Ä–≤–µ—Ä *tls.Conn
	var errDial error
	for –ø–æ–ø—ã—Ç–∫–∞ := 1; –ø–æ–ø—ã—Ç–∫–∞ <= –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫; –ø–æ–ø—ã—Ç–∫–∞++ {
		—Å–µ—Ä–≤–µ—Ä, errDial = tls.Dial("tcp", –∞–¥—Ä–µ—Å+":"+–ø–æ—Ä—Ç, tlsConfig)
		if errDial != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
			time.Sleep(–∑–∞–¥–µ—Ä–∂–∫–∞)
		} else {
			break
		}
	}

	–û—Ç–ø—Ä–∞–≤–∏—Ç—å–û—Ç–≤–µ—Ç–ù–∞–ó–∞–ø—Ä–æ—Å(—Å–µ—Ä–≤–µ—Ä, –∫–∞–Ω–∞–ª–û—Ç–ø—Ä–∞–≤–∫–∏–û—Ç–≤–µ—Ç–æ–≤)
}

type –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É struct {
	–°–µ—Ä–≤–∏—Å    []byte
	–ò–¥–ö–ª–∏–µ–Ω—Ç–∞ uuid.UUID
	–ó–∞–ø—Ä–æ—Å    –ó–∞–ø—Ä–æ—Å
}

func –û—Ç–ø—Ä–∞–≤–∏—Ç—å–û—Ç–≤–µ—Ç–ù–∞–ó–∞–ø—Ä–æ—Å(—Å–µ—Ä–≤–µ—Ä *tls.Conn, –∫–∞–Ω–∞–ª–û—Ç–ø—Ä–∞–≤–∫–∏–û—Ç–≤–µ—Ç–æ–≤ chan []byte) {
	for –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É := range –∫–∞–Ω–∞–ª–û—Ç–ø—Ä–∞–≤–∫–∏–û—Ç–≤–µ—Ç–æ–≤ {
		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä—É
		–ò–Ω—Ñ–æ(" –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É %+v \n", –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É)

		// –ë–∏–Ω–∞—Ä–Ω—ã–π–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É, err := –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É)

		// if err != nil {
		// 	–û—à–∏–±–∫–∞("  %+v \n", err)
		// }
		// –ò–Ω—Ñ–æ(" –ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å %+s \n", –ë–∏–Ω–∞—Ä–Ω—ã–π–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É)

		// int, err := —Å–µ—Ä–≤–µ—Ä.Write(–ë–∏–Ω–∞—Ä–Ω—ã–π–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É)
		int, err := —Å–µ—Ä–≤–µ—Ä.Write(–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v %+v \n", int, err)
		}
		–ò–Ω—Ñ–æ(" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ  %+v \n", int)
	}
}

// func (–∑ –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É) –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(T any) ([]byte, error) {
func –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(–¥–∞–Ω–Ω—ã–µ–î–ª—è–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è interface{}) ([]byte, error) {

	b, err := jsoniter.Marshal(&–¥–∞–Ω–Ω—ã–µ–î–ª—è–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
		return nil, err
	}
	–¥–∞–Ω–Ω—ã–µ := make([]byte, len(b)+4)
	binary.LittleEndian.PutUint32(–¥–∞–Ω–Ω—ã–µ, uint32(len(b)))
	copy(–¥–∞–Ω–Ω—ã–µ[4:], b)
	return –¥–∞–Ω–Ω—ã–µ, nil

}
