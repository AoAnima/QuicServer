package main

import (
	"net/http"

	_ "net/http/pprof"

	. "aoanima.ru/ConnQuic"
	. "aoanima.ru/Logger"
	"github.com/quic-go/quic-go"
)

var (
	ВходящийПорт  = ":81"
	ИсходящийПорт = ":82"
	// каналОтправкиОтветов     = make(chan ОтветКлиенту, 10)
	// КаналыИсходящихСообщений = map[string]chan ОтветКлиенту{}
)

// type ОтветКлиенту struct {
// 	Сервис    []byte
// 	Ответ     []byte
// 	ИдКлиента []byte
// }

// type ЗапросКлиента struct {
// 	Сервис       []byte
// 	Запрос       *ЗапросОтКлиента
// 	ИдКлиента    uuid.UUID
// 	ТокенКлиента []byte // JWT сериализованный
// }
// type ЗапросОтКлиента struct {
// 	СтрокаЗапроса string
// 	Форма         map[string][]string
// 	Файл          string
// }

func main() {             
	go func() {
		http.ListenAndServe("localhost:6061", nil)
	}()
	// Вероятно нужно откуда то получить список Сервисов с которомы предстоит общаться
	//  Или !!!! ОбработчикВходящихСообщений
	//обработчикСистемныхСообщений - функция которая обрабатывает сигналы от сервисов.
	ЗапуститьСервер("localhost:4242", обработчикСообщенийHTTPсервера, обработчикСистемныхСообщений)

	Инфо(" %s", "запустили сервер")
	// ЗапуститьСерверИсходящихСообщений()
}

func обработчикСистемныхСообщений(поток quic.Stream, сообщение Сообщение) {
	if сообщение.Пинг {	
		понг := сообщение
		понг.Пинг = false
		понг.Понг = true
		отправить, err :=Кодировать(понг)
		if err != nil {
			Ошибка("  %+v \n", err)
		}
		// Инфо(" отправляем понг  %+v \n", понг  )
		поток.Write(отправить)
	}

	// Инфо(" обработчикСистемныхСообщений : пришёл сигнал в системный поток от сервиса, нужно придумать какие сигналы и как будут обрабатываться%+v \n", сообщение)
}
