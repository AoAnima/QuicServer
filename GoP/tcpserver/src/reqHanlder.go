package main

import (
	"bytes"
	"crypto/tls"
	"crypto/x509"
	"encoding/binary"
	"fmt"
	"io"
	"os"
	"sync"
	"time"

	jsoniter "github.com/json-iterator/go"

	. "aoanima.ru/logger"
	"github.com/google/uuid"
)

var –∫–ª–∏–µ–Ω—Ç—ã = make(map[[16]byte]–ó–∞–ø—Ä–æ—Å)
var –º—å—é—Ç–µ–∫—Å = sync.Mutex{}

// –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ - –∏—Å–ø–æ–ª–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
func –ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è–ö–ú–µ–Ω–µ–¥–∂–µ—Ä—É–ó–∞–ø—Ä–æ—Å–æ–≤(–∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ chan –ó–∞–ø—Ä–æ—Å) {
	go –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏–°–æ–æ–±—â–µ–Ω–∏–π(–∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤)
	–ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π()
}

func –ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π (){
	caCert, err := os.ReadFile("cert/ca.crt")

	if err != nil {
		–û—à–∏–±–∫–∞(" %s ", err)
	}

	caCertPool := x509.NewCertPool()
	ok := caCertPool.AppendCertsFromPEM(caCert)
	–ò–Ω—Ñ–æ("–ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω?  %v ", ok)

	cert, err := tls.LoadX509KeyPair("cert/client.crt", "cert/client.key")
	if err != nil {
		–û—à–∏–±–∫–∞(" %s", err)
	}

	tlsConfig := &tls.Config{
		RootCAs:      caCertPool,
		Certificates: []tls.Certificate{cert},
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TCP-—Å–µ—Ä–≤–µ—Ä—É —Å TLS –Ω–∞ localhost:8080
	–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫ := 500
	–∑–∞–¥–µ—Ä–∂–∫–∞ := 1 * time.Second
	var —Å–µ—Ä–≤–µ—Ä *tls.Conn
	var errDial error
	for –ø–æ–ø—ã—Ç–∫–∞ := 1; –ø–æ–ø—ã—Ç–∫–∞ <= –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫; –ø–æ–ø—ã—Ç–∫–∞++ {
		—Å–µ—Ä–≤–µ—Ä, errDial = tls.Dial("tcp", "localhost:81", tlsConfig)
		if errDial != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
			time.Sleep(–∑–∞–¥–µ—Ä–∂–∫–∞)
		} else {
			break
		}
	}

	–†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ(—Å–µ—Ä–≤–µ—Ä)
	// defer —Å–µ—Ä–≤–µ—Ä.Close()
	// –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ - –∏—Å–ø–æ–ª–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É

// 	go –û—Ç–ø—Ä–∞–≤–∏—Ç—å–ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É(—Å–µ—Ä–≤–µ—Ä, –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤)
// // –∏—Å—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥—É—Ç –ø–∏—Å–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ
// 	–∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ <- –ó–∞–ø—Ä–æ—Å{
// 		–°–µ—Ä–≤–∏—Å: []byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"),
// 		–ó–∞–ø—Ä–æ—Å: –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞{
// 			–°—Ç—Ä–æ–∫–∞: "–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä.–∏—Å—Ö–æ–¥—è—â–∏–π",
// 			–§–æ—Ä–º–∞:  nil,
// 			–§–∞–π–ª:   "",
// 		},
// 		–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: –£–∏–¥(),
// 	}
}

func –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏–°–æ–æ–±—â–µ–Ω–∏–π(–∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ chan –ó–∞–ø—Ä–æ—Å) {
	caCert, err := os.ReadFile("cert/ca.crt")

	if err != nil {
		–û—à–∏–±–∫–∞(" %s ", err)
	}

	caCertPool := x509.NewCertPool()
	ok := caCertPool.AppendCertsFromPEM(caCert)
	–ò–Ω—Ñ–æ("–ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω?  %v ", ok)

	cert, err := tls.LoadX509KeyPair("cert/client.crt", "cert/client.key")
	if err != nil {
		–û—à–∏–±–∫–∞(" %s", err)
	}

	tlsConfig := &tls.Config{
		RootCAs:      caCertPool,
		Certificates: []tls.Certificate{cert},
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TCP-—Å–µ—Ä–≤–µ—Ä—É —Å TLS –Ω–∞ localhost:8080
	–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫ := 500
	–∑–∞–¥–µ—Ä–∂–∫–∞ := 1 * time.Second
	var —Å–µ—Ä–≤–µ—Ä *tls.Conn
	var errDial error
	for –ø–æ–ø—ã—Ç–∫–∞ := 1; –ø–æ–ø—ã—Ç–∫–∞ <= –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫; –ø–æ–ø—ã—Ç–∫–∞++ {
		—Å–µ—Ä–≤–µ—Ä, errDial = tls.Dial("tcp", "localhost:81", tlsConfig)
		if errDial != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
			time.Sleep(–∑–∞–¥–µ—Ä–∂–∫–∞)
		} else {
			break
		}
	}

	–†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ(—Å–µ—Ä–≤–µ—Ä)
	// defer —Å–µ—Ä–≤–µ—Ä.Close()
	// –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ - –∏—Å–ø–æ–ª–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É

	go –û—Ç–ø—Ä–∞–≤–∏—Ç—å–ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É(—Å–µ—Ä–≤–µ—Ä, –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤)
// –≤—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–ª—è –≤—Ö–æ–¥—è–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	–∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ <- –ó–∞–ø—Ä–æ—Å{
		–°–µ—Ä–≤–∏—Å: []byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"),
		–ó–∞–ø—Ä–æ—Å: –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞{
			–°—Ç—Ä–æ–∫–∞: "–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä",
			–§–æ—Ä–º–∞:  nil,
			–§–∞–π–ª:   "",
		},
		–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: –£–∏–¥(),
	}
}

func –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ(—Å–µ—Ä–≤–µ—Ä *tls.Conn) {
	–±—É—Ñ–µ—Ä := new(bytes.Buffer)
	// –ó–∞–ø—Ä–æ—Å{
	// 	–°–µ—Ä–≤–∏—Å:    []byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"),
	// 	–ó–∞–ø—Ä–æ—Å:    "ü§ù",
	// 	–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: –£–∏–¥(),
	// }

	–ò–Ω—Ñ–æ("  %+v %+v \n", "ü§ù", []byte("ü§ù"), len([]byte("ü§ù")))
	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, [4]byte{240, 159, 164, 157}) // [4]byte{240, 159, 164, 157} = "ü§ù"

	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, int32(len([]byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"))))
	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, []byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"))
	—Å–µ—Ä–≤–µ—Ä.Write(–±—É—Ñ–µ—Ä.Bytes())
}

type –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É struct {
	–°–µ—Ä–≤–∏—Å    []byte
	–ò–¥–ö–ª–∏–µ–Ω—Ç–∞ uuid.UUID
	–ó–∞–ø—Ä–æ—Å    –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞
}

func –ü–∏–Ω–≥–ü–æ–Ω–≥(—Å–µ—Ä–≤–µ—Ä *tls.Conn) {
	for {
		err := —Å–µ—Ä–≤–µ—Ä.Handshake()
		if err != nil {
			–ò–Ω—Ñ–æ("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ!  %+v", err)
		} else {
			–ò–Ω—Ñ–æ("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! %+v", err)
			i, err := —Å–µ—Ä–≤–µ—Ä.Write([]byte("ping"))
			if err != nil {
				–û—à–∏–±–∫–∞(" i %+v err %+v\n", i, err)
				—Å–µ—Ä–≤–µ—Ä.Close()

				break
			}
		}
		time.Sleep(5 * time.Second)
	}
}

func –û—Ç–ø—Ä–∞–≤–∏—Ç—å–ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É(—Å–µ—Ä–≤–µ—Ä *tls.Conn, –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ chan –ó–∞–ø—Ä–æ—Å) {
	for –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞ := range –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ {
		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä—É
		–ò–Ω—Ñ–æ(" –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞ %+v \n", –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞)
		–º—å—é—Ç–µ–∫—Å.Lock()
		–∫–ª–∏–µ–Ω—Ç—ã[–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞] = –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞
		–º—å—é—Ç–µ–∫—Å.Unlock()

		// –±—É—Ñ–µ—Ä := new(bytes.Buffer)
		–ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É := –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É{
			–°–µ—Ä–≤–∏—Å:    –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–°–µ—Ä–≤–∏—Å,
			–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞,
			–ó–∞–ø—Ä–æ—Å:    –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ó–∞–ø—Ä–æ—Å,
		}
		–ò–Ω—Ñ–æ(" –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É %+v \n", –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É)

		–ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å, err := –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É.–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å()

		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
		}
		–ò–Ω—Ñ–æ(" –ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å %+s \n", –ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å)
		// err = binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, –ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å)
		// if err != nil {
		// 	–û—à–∏–±–∫–∞("  %+v \n", err)
		// }

		int, err := —Å–µ—Ä–≤–µ—Ä.Write(–ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v %+v \n", int, err)
		}
		–ò–Ω—Ñ–æ(" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ  %+v \n", int)

	}
}

func (–∑ –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É) –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å() ([]byte, error) {

	b, err := jsoniter.Marshal(&–∑)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
		return nil, err
	}

	–¥–∞–Ω–Ω—ã–µ := make([]byte, len(b)+4)
	binary.LittleEndian.PutUint32(–¥–∞–Ω–Ω—ã–µ, uint32(len(b)))
	copy(–¥–∞–Ω–Ω—ã–µ[4:], b)
	return –¥–∞–Ω–Ω—ã–µ, nil

}

// func (–∑ –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É) –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å–í–ë–∏–Ω–∞—Ä–Ω—ã–π–§–æ—Ä–º–∞—Ç() ([]byte, error) {
// 	// ‚à¥ ‚ä∂ ‚Åù  ‚Åñ
// 	// ‚Åù - –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è.
// 	// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—Å—è —Å —Ä–∞–∑–º–µ—Ä–∞

// 	// –ò–Ω—Ñ–æ(" —Ä–∞–∑–º–µ—Ä  %+v %+v \n", "‚à¥",  len("‚à¥"))
// 	// –ò–Ω—Ñ–æ(" —Ä–∞–∑–º–µ—Ä  %+v %+v \n", "‚ä∂",  len("‚ä∂"))
// 	// –ò–Ω—Ñ–æ(" —Ä–∞–∑–º–µ—Ä  %+v %+v \n", "‚Åù",  len("‚Åù"))

// 	// –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏

// 	–±—É—Ñ–µ—Ä := new(bytes.Buffer)

// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, int32(6))
// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, [6]byte{208, 184, 208, 180, 208, 186})

// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, int32(len(–∑.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞)))
// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, –∑.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞)

// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, int32(len(–∑.–ó–∞–ø—Ä–æ—Å)))
// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, –∑.–ó–∞–ø—Ä–æ—Å)

// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, [4]byte{226, 129, 157, 0}) // ‚Åù - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

// 	–ò–Ω—Ñ–æ("–±–∏–Ω–∞—Ä–Ω—ã–µ–î–∞–Ω–Ω—ã–µ  %+s ;Bytes %+v \n", –±—É—Ñ–µ—Ä, int32(–±—É—Ñ–µ—Ä.Len()))

// 	–±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É := new(bytes.Buffer)
// 	binary.Write(–±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É, binary.LittleEndian, int32(–±—É—Ñ–µ—Ä.Len()))
// 	binary.Write(–±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É, binary.LittleEndian, –±—É—Ñ–µ—Ä.Bytes())
// 	// –±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É.Write(–±—É—Ñ–µ—Ä.Bytes())
// 	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—à–∏–±–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
// 	return –±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É.Bytes(), nil
// }

func –û—Ç–ø—Ä–∞–≤–∏—Ç—å–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É(—Å–µ—Ä–≤–µ—Ä *tls.Conn, –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ chan –ó–∞–ø—Ä–æ—Å) {

	for {
		var –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É
		–¥–ª–∏–Ω–∞ := make([]byte, 4)
		n, err := io.ReadFull(—Å–µ—Ä–≤–µ—Ä, –¥–ª–∏–Ω–∞)
		–ò–Ω—Ñ–æ("  %+v \n", n)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
		}
		lenData := binary.LittleEndian.Uint32(–¥–ª–∏–Ω–∞)

		–±—É—Ñ–µ—Ä := make([]byte, lenData)
		i, err := io.ReadFull(—Å–µ—Ä–≤–µ—Ä, –±—É—Ñ–µ—Ä)
		–ò–Ω—Ñ–æ("  %+v \n", i)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
		}
		err = binary.Read(bytes.NewReader(–±—É—Ñ–µ—Ä), binary.LittleEndian, &–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É)
		if err != nil {
			–û—à–∏–±–∫–∞("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %+v ", err)
		}

		–∫–ª–∏–µ–Ω—Ç—ã[–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞].–ö–∞–Ω–∞–ª–û—Ç–≤–µ—Ç–∞ <- –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É

	}
}

func –î–µ–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É(–±–∏–Ω–∞—Ä–Ω—ã–µ–î–∞–Ω–Ω—ã–µ []byte) (*–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É, error) {
	–±—É—Ñ–µ—Ä := bytes.NewReader(–±–∏–Ω–∞—Ä–Ω—ã–µ–î–∞–Ω–Ω—ã–µ)
	var –¥–ª–∏–Ω–∞–ò–¥–ö–ª–∏–µ–Ω—Ç–∞ int32
	if err := binary.Read(–±—É—Ñ–µ—Ä, binary.LittleEndian, &–¥–ª–∏–Ω–∞–ò–¥–ö–ª–∏–µ–Ω—Ç–∞); err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
	}
	–∏–¥–ö–ª–∏–µ–Ω—Ç–∞Bytes := make([]byte, –¥–ª–∏–Ω–∞–ò–¥–ö–ª–∏–µ–Ω—Ç–∞)
	if err := binary.Read(–±—É—Ñ–µ—Ä, binary.LittleEndian, &–∏–¥–ö–ª–∏–µ–Ω—Ç–∞Bytes); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ò–¥–ö–ª–∏–µ–Ω—Ç–∞: %v", err)
	}
	–∏–¥–ö–ª–∏–µ–Ω—Ç–∞ := –∏–¥–ö–ª–∏–µ–Ω—Ç–∞Bytes

	var –∑–Ω–∞—á–µ–Ω–∏–µBytes []byte
	if err := binary.Read(–±—É—Ñ–µ—Ä, binary.LittleEndian, &–∑–Ω–∞—á–µ–Ω–∏–µBytes); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ string: %v", err)
	}
	–æ—Ç–≤–µ—Ç := string(–∑–Ω–∞—á–µ–Ω–∏–µBytes)
	–æ—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É := &–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É{
		–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: uuid.UUID(–∏–¥–ö–ª–∏–µ–Ω—Ç–∞),
		–û—Ç–≤–µ—Ç:     –æ—Ç–≤–µ—Ç,
	}

	return –æ—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É, nil
}
