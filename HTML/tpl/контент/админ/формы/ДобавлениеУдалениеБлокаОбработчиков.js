{{define "ДобавлениеУдалениеБлокаОбработчиков.js"}} 

   
    function Шаблон (имяШаблона, номер) {   
       
        console.log("Шаблон", имяШаблона, номер);
        let шаблоны =   {
            "role_access": `{{template "БлокПравДоступа"}}`,
            "service_handler": `{{template "БлокОбработчиков"}}`,
        }       
        console.log(шаблоны[имяШаблона]);
        return шаблоны[имяШаблона]
    }  

    function добавитьБлок(event, имяШаблона, номер) {  
        event.preventDefault();
        event.stopPropagation();

        let блоки = document.querySelectorAll(`[id^="${имяШаблона}"]`);
        console.log(блоки);
// теперь elements содержит все элементы с id, начинающимся с "yourString"

        let количествоБлоков = блоки.length;
        let номерНовогоБлока = +количествоБлоков + 1;
        let новыйИд = `${имяШаблона}-${номерНовогоБлока}`;
        console.log(имяШаблона, номерНовогоБлока);
        let новыйБлок = Шаблон(имяШаблона, номерНовогоБлока);
        let блокКоторыйВызвалСобытие = event.target.closest(`[id^="${имяШаблона}"]`);
        console.log("блокКоторыйВызвалСобытие", блокКоторыйВызвалСобытие);
        блокКоторыйВызвалСобытие.insertAdjacentHTML('afterend', новыйБлок);
    }

    function удалитьБлок(event, имяШаблона) {
        let блокКоторыйВызвалСобытие = event.target.closest(`[id^="${имяШаблона}"]`);
        блокКоторыйВызвалСобытие.remove();
    }

    // Нужно добавить в рендер функцию, точнее в парсинг функцию обработчик который будет собирать все javascript из шаблонов и помещать их в один файл,  
    /*
    может можно сделать так чтобы каждый js блок кода был объявлен как define "обработчикФормыНовогоМаршрута.js"
    */

    var количествоОбработчиков = 0 // просто номер добавленного обработчика, не уменьшается при удалении, потому 


{{end}}