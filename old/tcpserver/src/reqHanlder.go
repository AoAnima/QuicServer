package main

import (
	"crypto/tls"
	"crypto/x509"
	"encoding/binary"
	"os"
	"sync"
	"time"

	jsoniter "github.com/json-iterator/go"

	. "aoanima.ru/logger"
	"github.com/google/uuid"
)

var –∫–ª–∏–µ–Ω—Ç—ã = make(map[[16]byte]map[string]–ó–∞–ø—Ä–æ—Å)
var –º—å—é—Ç–µ–∫—Å = sync.Mutex{}

// –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ - –∏—Å–ø–æ–ª–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
func –ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è–ö–ú–µ–Ω–µ–¥–∂–µ—Ä—É–ó–∞–ø—Ä–æ—Å–æ–≤(–∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ chan –ó–∞–ø—Ä–æ—Å) {
	go –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏–°–æ–æ–±—â–µ–Ω–∏–π(–∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤)
	–ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π()
}

func –ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–ü–æ–ª—É—á–µ–Ω–∏—è–°–æ–æ–±—â–µ–Ω–∏–π() {
	caCert, err := os.ReadFile("cert/ca.crt")

	if err != nil {
		–û—à–∏–±–∫–∞(" %s ", err)
	}

	caCertPool := x509.NewCertPool()
	ok := caCertPool.AppendCertsFromPEM(caCert)
	–ò–Ω—Ñ–æ("–ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω?  %v ", ok)

	cert, err := tls.LoadX509KeyPair("cert/client.crt", "cert/client.key")
	if err != nil {
		–û—à–∏–±–∫–∞(" %s", err)
	}

	tlsConfig := &tls.Config{
		RootCAs:      caCertPool,
		Certificates: []tls.Certificate{cert},
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TCP-—Å–µ—Ä–≤–µ—Ä—É —Å TLS –Ω–∞ localhost:8080
	–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫ := 500
	–∑–∞–¥–µ—Ä–∂–∫–∞ := 1 * time.Second
	var —Å–µ—Ä–≤–µ—Ä *tls.Conn
	var errDial error
	for –ø–æ–ø—ã—Ç–∫–∞ := 1; –ø–æ–ø—ã—Ç–∫–∞ <= –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫; –ø–æ–ø—ã—Ç–∫–∞++ {
		—Å–µ—Ä–≤–µ—Ä, errDial = tls.Dial("tcp", "localhost:82", tlsConfig)
		if errDial != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
			time.Sleep(–∑–∞–¥–µ—Ä–∂–∫–∞)
		} else {
			break
		}
	}
	go –ß–∏—Ç–∞—Ç—å–°–æ–æ–±—â–µ–Ω–∏—è–û—Ç–≤–µ—Ç–∞(—Å–µ—Ä–≤–µ—Ä)
	–†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ(—Å–µ—Ä–≤–µ—Ä)
}

// func –ß–∏—Ç–∞—Ç—å–°–æ–æ–±—â–µ–Ω–∏—è(—Å–µ—Ä–≤–µ—Ä *tls.Conn) {
// 	for {
// 		—Å–æ–æ–±—â–µ–Ω–∏–µ := make([]byte, 1024)
// 		_, err := —Å–µ—Ä–≤–µ—Ä.Read(—Å–æ–æ–±—â–µ–Ω–∏–µ)
// 		–ò–Ω—Ñ–æ("—Å–æ–æ–±—â–µ–Ω–∏–µ  %+s \n", —Å–æ–æ–±—â–µ–Ω–∏–µ)
// 		if err != nil {
// 			–û—à–∏–±–∫–∞(" %s", err)
// 		}

// 	}
// }

func –ß–∏—Ç–∞—Ç—å–°–æ–æ–±—â–µ–Ω–∏—è–û—Ç–≤–µ—Ç–∞(—Å–µ—Ä–≤–µ—Ä *tls.Conn) {

	–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è := make([]byte, 4)
	var –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç int
	var err error
	for {
		–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err = —Å–µ—Ä–≤–µ—Ä.Read(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è)
		–ò–Ω—Ñ–æ(" –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è %+v , –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v \n", –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç)

		if err != nil {
			–û—à–∏–±–∫–∞(" –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v  err %+v \n", –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err)
			break
		}

		// –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –±–∞–π—Ç–∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
		–¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö := binary.LittleEndian.Uint32(–¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è)

		–ò–Ω—Ñ–æ(" –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö  %+v \n", –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö)
		–ò–Ω—Ñ–æ(" –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è %+v ,  \n –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v ,  \n –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö %+v \n", –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è,
			–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö)

		//—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç = –¥–ª–∏–Ω–∞–°–æ–æ–±—â–µ–Ω–∏—è
		// var –∑–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞ –ó–∞–ø—Ä–æ—Å–ö–ª–∏–µ–Ω—Ç–∞
		–ø–∞–∫–µ—Ç–û—Ç–≤–µ—Ç–∞ := make([]byte, –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö)
		–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç, err = —Å–µ—Ä–≤–µ—Ä.Read(–ø–∞–∫–µ—Ç–û—Ç–≤–µ—Ç–∞)
		if err != nil {
			–û—à–∏–±–∫–∞("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %+v ", err)
		}
		if –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö != uint32(–ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç) {
			–û—à–∏–±–∫–∞("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã—Ö –±–∞–π—Ç –Ω–µ —Ä–∞–Ω–≤–æ –¥–ª–∏–Ω–µ –¥–∞–Ω–Ω—ã—Ö :\n –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö %+v  <> –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç %+v ", –¥–ª–∏–Ω–∞–î–∞–Ω–Ω—ã—Ö, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ–ë–∞–π—Ç)
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –ø–∞–∫–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é –≥–æ—Ä—É—Ç–∏–Ω—É, —Ç.–∫. –≤ –æ–∂–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥—Ç –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω
		go –û—Ç–ø—Ä–∞–≤–∏—Ç—å–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É(–ø–∞–∫–µ—Ç–û—Ç–≤–µ—Ç–∞)
	}

}

func –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è–ö–°–µ—Ä–≤–µ—Ä—É–î–ª—è–û—Ç–ø—Ä–∞–≤–∫–∏–°–æ–æ–±—â–µ–Ω–∏–π(–∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ chan –ó–∞–ø—Ä–æ—Å) {
	caCert, err := os.ReadFile("cert/ca.crt")

	if err != nil {
		–û—à–∏–±–∫–∞(" %s ", err)
	}

	caCertPool := x509.NewCertPool()
	ok := caCertPool.AppendCertsFromPEM(caCert)
	–ò–Ω—Ñ–æ("–ö–æ—Ä–Ω–µ–≤–æ–π —Å–µ—Ä—Ç—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω?  %v ", ok)

	cert, err := tls.LoadX509KeyPair("cert/client.crt", "cert/client.key")
	if err != nil {
		–û—à–∏–±–∫–∞(" %s", err)
	}

	tlsConfig := &tls.Config{
		RootCAs:      caCertPool,
		Certificates: []tls.Certificate{cert},
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TCP-—Å–µ—Ä–≤–µ—Ä—É —Å TLS –Ω–∞ localhost:8080
	–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫ := 500
	–∑–∞–¥–µ—Ä–∂–∫–∞ := 1 * time.Second
	var —Å–µ—Ä–≤–µ—Ä *tls.Conn
	var errDial error
	for –ø–æ–ø—ã—Ç–∫–∞ := 1; –ø–æ–ø—ã—Ç–∫–∞ <= –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ü–æ–ø—ã—Ç–æ–∫; –ø–æ–ø—ã—Ç–∫–∞++ {
		—Å–µ—Ä–≤–µ—Ä, errDial = tls.Dial("tcp", "localhost:81", tlsConfig)
		if errDial != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
			time.Sleep(–∑–∞–¥–µ—Ä–∂–∫–∞)
		} else {
			break
		}
	}

	// defer —Å–µ—Ä–≤–µ—Ä.Close()

	// –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ - –∏—Å–ø–æ–ª–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–Ω–∞–ª –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
	go –û—Ç–ø—Ä–∞–≤–∏—Ç—å–ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É(—Å–µ—Ä–≤–µ—Ä, –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤)

	// –≤—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–ª—è –≤—Ö–æ–¥—è–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	// baseURL := "http://example.com/catalog/lost"
	// params := url.Values{}
	// params.Add("value", "1")
	// params.Add("value2", "2")

	// u, _ := url.ParseRequestURI(baseURL)
	// u.RawQuery = params.Encode()
	// –ò–Ω—Ñ–æ("  %+v %+v \n", u, params)
	// –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ <- –ó–∞–ø—Ä–æ—Å{
	// 	–°–µ—Ä–≤–∏—Å:  []byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"),
	// 	–£—Ä–ª–ü—É—Ç—å: []byte(),
	// 	–ó–∞–ø—Ä–æ—Å: –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞{
	// 		–°—Ç—Ä–æ–∫–∞–ó–∞–ø—Ä–æ—Å–∞: u.String(),
	// 		–§–æ—Ä–º–∞:         nil,
	// 		–§–∞–π–ª:          "",
	// 	},
	// 	–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: –£–∏–¥(),
	// }
}

func –†—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ(—Å–µ—Ä–≤–µ—Ä *tls.Conn) {
	// –±—É—Ñ–µ—Ä := new(bytes.Buffer)
	// –ó–∞–ø—Ä–æ—Å{
	// 	–°–µ—Ä–≤–∏—Å:    []byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"),
	// 	–ó–∞–ø—Ä–æ—Å:    "ü§ù",
	// 	–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: –£–∏–¥(),
	// }

	// –ò–Ω—Ñ–æ("  %+v %+v \n", "ü§ù", []byte("ü§ù"), len([]byte("ü§ù")))
	// binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, [4]byte{240, 159, 164, 157}) // [4]byte{240, 159, 164, 157} = "ü§ù"

	// –ë—É–¥–µ—Ç –æ–ø–∏—Å–∞—ã–≤–∞—Ç—å –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞–∫–æ–º –≤–∏–¥–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
	//–Ω–∞–ø—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–∏—Å –ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä , –∏–º–µ–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –û—Ç–≤–µ—Ç–ö–õ–∏–µ–Ω—Ç—É : –î–ª—è–≠—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –µ–º—É –Ω—É–∂–µ–Ω –ò–¥–ö–ª–∏–µ–Ω—Ç–∞, –∏ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ HTML —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ json
	type –°—Ç—Ä—É–∫—Ç—É—Ä–∞–î–∞–Ω–Ω—ã—Ö struct {
		–û–±—ä–µ–∫—Ç–î–∞–Ω–Ω—ã—Ö interface{}
	}
	type –û—Ç–ø–µ—á–∞—Ç–æ–∫ struct {
		–°–µ—Ä–≤–∏—Å   string
		–ú–∞—Ä—à—Ä—É—Ç—ã map[string]map[string]interface{}
	}

	–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä := –û—Ç–ø–µ—á–∞—Ç–æ–∫{
		–°–µ—Ä–≤–∏—Å: "–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä",
		–ú–∞—Ä—à—Ä—É—Ç—ã: map[string]map[string]interface{}{
			"–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É": {
				"HTML": "string",
				"JSON": "string",
			},
		},
	}
	// –ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä := –û—Ç–ø–µ—á–∞—Ç–æ–∫{
	// 	–°–µ—Ä–≤–∏—Å: "–ö–∞—Ç–∞–ª–æ–≥–°–µ—Ä–≤–∏—Å",
	// 	–ú–∞—Ä—à—Ä—É—Ç—ã: map[string]map[string]interface{}{
	// 		"catalog": map[string]interface{}{
	// 			"–ó–∞–ø—Ä–æ—Å": "string",
	// 		}
	//
	// 	},
	// }
		–ò–Ω—Ñ–æ("  –ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ %+v \n",  –ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä)
	–¥–∞–Ω–Ω—ã–µ–í–û—Ç–ø—Ä–∞–≤–∫—É, err := –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
	}
	// binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, int32(len([]byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"))))
	// binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, []byte("–ö–ª–∏–µ–Ω—Ç–°–µ—Ä–≤–µ—Ä"))
	—Å–µ—Ä–≤–µ—Ä.Write(–¥–∞–Ω–Ω—ã–µ–í–û—Ç–ø—Ä–∞–≤–∫—É)

}

type –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É struct {
	–£–ò–î–ó–∞–ø—Ä–æ—Å–∞ string
	–°–µ—Ä–≤–∏—Å     []byte
	–ò–¥–ö–ª–∏–µ–Ω—Ç–∞  uuid.UUID
	–£—Ä–ª–ü—É—Ç—å    []byte
	–ó–∞–ø—Ä–æ—Å     –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞
}

func –û—Ç–ø—Ä–∞–≤–∏—Ç—å–ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É(—Å–µ—Ä–≤–µ—Ä *tls.Conn, –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ chan –ó–∞–ø—Ä–æ—Å) {
	for –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞ := range –∫–∞–Ω–∞–ª–ó–∞–ø—Ä–æ—Å–æ–≤ {
		// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä—É
		–ò–Ω—Ñ–æ(" –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞ %+v \n", –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞)
		–ò–Ω—Ñ–æ("  –¢—É—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ –≥–∞–≤–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–∂—ã–π —Ä–∞–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–ª–∏–µ–Ω—Ç–∞, –∏ –≤–æ—Ö–º–æ–∂–Ω–æ –ª—É—á—à —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –∫—É—á—É, –∏–ª–∏ –∫–∞—Ä—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤, –≥–¥–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –±—É–¥–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –£–ò–î –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã –π–±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—Å—è –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤. %+v \n")
		–º—å—é—Ç–µ–∫—Å.Lock()
		if _, ok := –∫–ª–∏–µ–Ω—Ç—ã[–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞]; ok {
			–∫–ª–∏–µ–Ω—Ç—ã[–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞][–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–£–ò–î–ó–∞–ø—Ä–æ—Å–∞] = –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞
		} else {
			–∫–ª–∏–µ–Ω—Ç—ã[–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞] = map[string]–ó–∞–ø—Ä–æ—Å{
				–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–£–ò–î–ó–∞–ø—Ä–æ—Å–∞: –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞,
			}
		}
		// –∫–ª–∏–µ–Ω—Ç—ã[–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞][–ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–£–ò–î–ó–∞–ø—Ä–æ—Å–∞] = –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞
		–º—å—é—Ç–µ–∫—Å.Unlock()
		–ò–Ω—Ñ–æ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å–ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É  –∫–ª–∏–µ–Ω—Ç—ã %+v \n", –∫–ª–∏–µ–Ω—Ç—ã)
		// –±—É—Ñ–µ—Ä := new(bytes.Buffer)
		// –∑–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É := –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É{
		// 	–°–µ—Ä–≤–∏—Å:    –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–°–µ—Ä–≤–∏—Å,
		// 	–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞,
		// 	–ó–∞–ø—Ä–æ—Å:    –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ó–∞–ø—Ä–æ—Å,
		// }
		// –ò–Ω—Ñ–æ(" –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É %+v \n", –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É)

		–ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å, err := –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(–ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É{
			–£–ò–î–ó–∞–ø—Ä–æ—Å–∞: –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–£–ò–î–ó–∞–ø—Ä–æ—Å–∞,
			–£—Ä–ª–ü—É—Ç—å:    –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–£—Ä–ª–ü—É—Ç—å,
			–°–µ—Ä–≤–∏—Å:     –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–°–µ—Ä–≤–∏—Å,
			–ò–¥–ö–ª–∏–µ–Ω—Ç–∞:  –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞,
			–ó–∞–ø—Ä–æ—Å:     –ó–∞–ø—Ä–æ—Å–û—Ç–ö–ª–∏–µ–Ω—Ç–∞.–ó–∞–ø—Ä–æ—Å,
		})

		if err != nil {
			–û—à–∏–±–∫–∞("  %+v \n", err)
		}
		–ò–Ω—Ñ–æ(" –ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å %+s \n", –ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å)
		// err = binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, –ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å)
		// if err != nil {
		// 	–û—à–∏–±–∫–∞("  %+v \n", err)
		// }

		int, err := —Å–µ—Ä–≤–µ—Ä.Write(–ë–∏–Ω–∞—Ä–Ω—ã–π–ó–∞–ø—Ä–æ—Å)
		if err != nil {
			–û—à–∏–±–∫–∞("  %+v %+v \n", int, err)
		}
		–ò–Ω—Ñ–æ(" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ  %+v \n", int)

	}
}

// func (–∑ –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É) –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(T any) ([]byte, error) {
func –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å(–¥–∞–Ω–Ω—ã–µ–î–ª—è–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è interface{}) ([]byte, error) {

	b, err := jsoniter.Marshal(&–¥–∞–Ω–Ω—ã–µ–î–ª—è–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
		return nil, err
	}
	–¥–∞–Ω–Ω—ã–µ := make([]byte, len(b)+4)
	binary.LittleEndian.PutUint32(–¥–∞–Ω–Ω—ã–µ, uint32(len(b)))
	copy(–¥–∞–Ω–Ω—ã–µ[4:], b)
	return –¥–∞–Ω–Ω—ã–µ, nil

}

func –û—Ç–ø—Ä–∞–≤–∏—Ç—å–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É(–ø–∞–∫–µ—Ç–û—Ç–≤–µ—Ç–∞ []byte) {

	// –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç, —á—Ç–æ –ø—Ä–∏—à–ª–æ, –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç—É, –∏ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–Ω–µ—Ç—É

	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º, –ø–æ–ª—É—á–∞–µ–º –ò–¥–ö–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë —á—Ç–æ –ø—Ä–∏—à–ª–æ
	var –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É–ö–∞—Ä—Ç–∞ map[string]interface{}

	err := jsoniter.Unmarshal(–ø–∞–∫–µ—Ç–û—Ç–≤–µ—Ç–∞, &–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É–ö–∞—Ä—Ç–∞)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
	}
	–ò–Ω—Ñ–æ(" –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É–ö–∞—Ä—Ç–∞ %+s \n", –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É–ö–∞—Ä—Ç–∞)
	–ò–Ω—Ñ–æ(" –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É–ö–∞—Ä—Ç–∞ –ò–¥–ö–ª–∏–µ–Ω—Ç–∞ %+s \n", –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É–ö–∞—Ä—Ç–∞["–ò–¥–ö–ª–∏–µ–Ω—Ç–∞"].(string))

	// –ò–¥–ö–ª–∏–µ–Ω—Ç–∞ := [16]byte{}
	// copy(–ò–¥–ö–ª–∏–µ–Ω—Ç–∞[:], –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É–ö–∞—Ä—Ç–∞["–ò–¥–ö–ª–∏–µ–Ω—Ç–∞"].(string))
	–ò–¥–ö–ª–∏–µ–Ω—Ç–∞, err := uuid.Parse(–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É–ö–∞—Ä—Ç–∞["–ò–¥–ö–ª–∏–µ–Ω—Ç–∞"].(string))
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
	}
	–£–ò–î–ó–∞–ø—Ä–æ—Å–∞ := –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É–ö–∞—Ä—Ç–∞["–£–ò–î–ó–∞–ø—Ä–æ—Å–∞"].(string)
	if err != nil {
		–û—à–∏–±–∫–∞("  %+v \n", err)
	}
	–ò–Ω—Ñ–æ(" –ò–¥–ö–ª–∏–µ–Ω—Ç–∞ %+v; –£–ò–î–ó–∞–ø—Ä–æ—Å–∞ %+v \n", –ò–¥–ö–ª–∏–µ–Ω—Ç–∞)
	–û—Ç–≤–µ—Ç := –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É{
		–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: –ò–¥–ö–ª–∏–µ–Ω—Ç–∞,
		–û—Ç–≤–µ—Ç:     string(–ø–∞–∫–µ—Ç–û—Ç–≤–µ—Ç–∞),
	}

	if –∫–ª–∏–µ–Ω—Ç, –µ—Å—Ç—å := –∫–ª–∏–µ–Ω—Ç—ã[–ò–¥–ö–ª–∏–µ–Ω—Ç–∞]; –µ—Å—Ç—å {
		if —É–∏–¥–ó–∞–ø—Ä–æ—Å, –µ—Å—Ç—å–£–∏–¥–ó–∞–ø—Ä–æ—Å–∞ := –∫–ª–∏–µ–Ω—Ç[–£–ò–î–ó–∞–ø—Ä–æ—Å–∞]; –µ—Å—Ç—å–£–∏–¥–ó–∞–ø—Ä–æ—Å–∞ {
			–ò–Ω—Ñ–æ(" –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É %+v  %+v  %+v \n", –ò–¥–ö–ª–∏–µ–Ω—Ç–∞, –∫–ª–∏–µ–Ω—Ç, —É–∏–¥–ó–∞–ø—Ä–æ—Å)
			—É–∏–¥–ó–∞–ø—Ä–æ—Å.–ö–∞–Ω–∞–ª–û—Ç–≤–µ—Ç–∞ <- –û—Ç–≤–µ—Ç
			// –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —É–¥–∞–ª–∏–º –µ–≥–æ –∏–∑ –∫–∞—Ä—Ç—ã
			delete(–∫–ª–∏–µ–Ω—Ç, –£–ò–î–ó–∞–ø—Ä–æ—Å–∞)
		}
	} else {
		–ò–Ω—Ñ–æ(" –ö–ª–∏–µ–Ω—Ç —Å –ò–¥–ö–ª–∏–µ–Ω—Ç–∞ %+v –Ω–µ –Ω–∞–π–¥–µ–Ω %+v \n", –ò–¥–ö–ª–∏–µ–Ω—Ç–∞, –∫–ª–∏–µ–Ω—Ç—ã)
	}
	// for {
	// 	var –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É –û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É
	// 	–¥–ª–∏–Ω–∞ := make([]byte, 4)
	// 	n, err := io.ReadFull(—Å–µ—Ä–≤–µ—Ä, –¥–ª–∏–Ω–∞)
	// 	–ò–Ω—Ñ–æ("  %+v \n", n)
	// 	if err != nil {
	// 		–û—à–∏–±–∫–∞("  %+v \n", err)
	// 	}
	// 	lenData := binary.LittleEndian.Uint32(–¥–ª–∏–Ω–∞)

	// 	–±—É—Ñ–µ—Ä := make([]byte, lenData)
	// 	i, err := io.ReadFull(—Å–µ—Ä–≤–µ—Ä, –±—É—Ñ–µ—Ä)
	// 	–ò–Ω—Ñ–æ("  %+v \n", i)
	// 	if err != nil {
	// 		–û—à–∏–±–∫–∞("  %+v \n", err)
	// 	}
	// 	err = binary.Read(bytes.NewReader(–±—É—Ñ–µ—Ä), binary.LittleEndian, &–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É)
	// 	if err != nil {
	// 		–û—à–∏–±–∫–∞("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %+v ", err)
	// 	}

	// }
}

// func –î–µ–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É(–±–∏–Ω–∞—Ä–Ω—ã–µ–î–∞–Ω–Ω—ã–µ []byte) (*–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É, error) {
// 	–±—É—Ñ–µ—Ä := bytes.NewReader(–±–∏–Ω–∞—Ä–Ω—ã–µ–î–∞–Ω–Ω—ã–µ)
// 	var –¥–ª–∏–Ω–∞–ò–¥–ö–ª–∏–µ–Ω—Ç–∞ int32
// 	if err := binary.Read(–±—É—Ñ–µ—Ä, binary.LittleEndian, &–¥–ª–∏–Ω–∞–ò–¥–ö–ª–∏–µ–Ω—Ç–∞); err != nil {
// 		–û—à–∏–±–∫–∞("  %+v \n", err)
// 	}
// 	–∏–¥–ö–ª–∏–µ–Ω—Ç–∞Bytes := make([]byte, –¥–ª–∏–Ω–∞–ò–¥–ö–ª–∏–µ–Ω—Ç–∞)
// 	if err := binary.Read(–±—É—Ñ–µ—Ä, binary.LittleEndian, &–∏–¥–ö–ª–∏–µ–Ω—Ç–∞Bytes); err != nil {
// 		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ò–¥–ö–ª–∏–µ–Ω—Ç–∞: %v", err)
// 	}
// 	–∏–¥–ö–ª–∏–µ–Ω—Ç–∞ := –∏–¥–ö–ª–∏–µ–Ω—Ç–∞Bytes

// 	var –∑–Ω–∞—á–µ–Ω–∏–µBytes []byte
// 	if err := binary.Read(–±—É—Ñ–µ—Ä, binary.LittleEndian, &–∑–Ω–∞—á–µ–Ω–∏–µBytes); err != nil {
// 		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ string: %v", err)
// 	}
// 	–æ—Ç–≤–µ—Ç := string(–∑–Ω–∞—á–µ–Ω–∏–µBytes)
// 	–æ—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É := &–û—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É{
// 		–ò–¥–ö–ª–∏–µ–Ω—Ç–∞: uuid.UUID(–∏–¥–ö–ª–∏–µ–Ω—Ç–∞),
// 		–û—Ç–≤–µ—Ç:     –æ—Ç–≤–µ—Ç,
// 	}

// 	return –æ—Ç–≤–µ—Ç–ö–ª–∏–µ–Ω—Ç—É, nil
// }

// func –ü–∏–Ω–≥–ü–æ–Ω–≥(—Å–µ—Ä–≤–µ—Ä *tls.Conn) {
// 	for {
// 		err := —Å–µ—Ä–≤–µ—Ä.Handshake()
// 		if err != nil {
// 			–ò–Ω—Ñ–æ("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ!  %+v", err)
// 		} else {
// 			–ò–Ω—Ñ–æ("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! %+v", err)
// 			i, err := —Å–µ—Ä–≤–µ—Ä.Write([]byte("ping"))
// 			if err != nil {
// 				–û—à–∏–±–∫–∞(" i %+v err %+v\n", i, err)
// 				—Å–µ—Ä–≤–µ—Ä.Close()

// 				break
// 			}
// 		}
// 		time.Sleep(5 * time.Second)
// 	}
// }

// func (–∑ –ó–∞–ø—Ä–æ—Å–í–û–±—Ä–∞–±–æ—Ç–∫—É) –ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å–í–ë–∏–Ω–∞—Ä–Ω—ã–π–§–æ—Ä–º–∞—Ç() ([]byte, error) {
// 	// ‚à¥ ‚ä∂ ‚Åù  ‚Åñ
// 	// ‚Åù - –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è.
// 	// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—Å—è —Å —Ä–∞–∑–º–µ—Ä–∞

// 	// –ò–Ω—Ñ–æ(" —Ä–∞–∑–º–µ—Ä  %+v %+v \n", "‚à¥",  len("‚à¥"))
// 	// –ò–Ω—Ñ–æ(" —Ä–∞–∑–º–µ—Ä  %+v %+v \n", "‚ä∂",  len("‚ä∂"))
// 	// –ò–Ω—Ñ–æ(" —Ä–∞–∑–º–µ—Ä  %+v %+v \n", "‚Åù",  len("‚Åù"))

// 	// –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏

// 	–±—É—Ñ–µ—Ä := new(bytes.Buffer)

// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, int32(6))
// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, [6]byte{208, 184, 208, 180, 208, 186})

// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, int32(len(–∑.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞)))
// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, –∑.–ò–¥–ö–ª–∏–µ–Ω—Ç–∞)

// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, int32(len(–∑.–ó–∞–ø—Ä–æ—Å)))
// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, –∑.–ó–∞–ø—Ä–æ—Å)

// 	binary.Write(–±—É—Ñ–µ—Ä, binary.LittleEndian, [4]byte{226, 129, 157, 0}) // ‚Åù - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

// 	–ò–Ω—Ñ–æ("–±–∏–Ω–∞—Ä–Ω—ã–µ–î–∞–Ω–Ω—ã–µ  %+s ;Bytes %+v \n", –±—É—Ñ–µ—Ä, int32(–±—É—Ñ–µ—Ä.Len()))

// 	–±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É := new(bytes.Buffer)
// 	binary.Write(–±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É, binary.LittleEndian, int32(–±—É—Ñ–µ—Ä.Len()))
// 	binary.Write(–±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É, binary.LittleEndian, –±—É—Ñ–µ—Ä.Bytes())
// 	// –±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É.Write(–±—É—Ñ–µ—Ä.Bytes())
// 	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—à–∏–±–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
// 	return –±—É—Ñ–µ—Ä–í–û—Ç–ø—Ä–∞–≤–∫—É.Bytes(), nil
// }
