package main

import (
	"sync"

	. "aoanima.ru/ConnQuic"
	. "aoanima.ru/DGApi"
	. "aoanima.ru/Logger"
	. "aoanima.ru/QErrors"
	"github.com/quic-go/quic-go"
)

type Конфигурация struct{}

var Сервис ИмяСервиса = "ИмяСервиса"
var Описание string = "Описание сервиса"
var Маршруты = map[string]func(quic.Stream, Сообщение){
	"имяОбработчика": имяОбработчика(quic.Stream, Сообщение),
}

// var каталогСтатичныхФайлов string
var Конфиг = &Конфигурация{}
var клиент = make(Клиент)
var База СоединениеСДГраф

func init() {
	Инфо(" проверяем какие аргументы переданы при запуске, если пусто то читаем конфиг, если конфига нет то устанавливаем значения по умолчанию %+v \n")

	// каталогСтатичныхФайлов = "../../jetHTML/static/"
	ЧитатьКонфиг(Конфиг)
	База = ДГраф()

	статус := База.Схема(ДанныеЗапроса{
		Запрос: СхемаБазы,
	})

	if статус.Код != Ок {
		Ошибка(" Ошибка записи схемы  %+v \n", статус)
	}
}

func main() {
	сервер := &СхемаСервера{
		Имя:   "SynQuic",
		Адрес: "localhost:4242",
		ДанныеСессии: ДанныеСессии{
			Блок:   &sync.RWMutex{},
			Потоки: []quic.Stream{},
		},
	}
	массивМаршрутов := []Маршрут{}
	for маршрут, _ := range Маршруты {
		массивМаршрутов = append(массивМаршрутов, Маршрут(маршрут))
	}

	сообщениеРегистрации := Сообщение{
		Сервис:      Сервис,
		Регистрация: true,
		Маршруты:    массивМаршрутов,
	}

	клиент.Соединиться(сервер,
		сообщениеРегистрации,
		ОбработчикОтветаРегистрации,
		ОбработчикЗапросовСервера)
}

func ОбработчикОтветаРегистрации(сообщение Сообщение) {
	Инфо("  ОбработчикОтветаРегистрации %+v \n", сообщение)
}

func ОбработчикЗапросовСервера(поток quic.Stream, сообщение Сообщение) {
	name := "function1"
	if f, ok := Маршруты[name]; ok {
		f(поток, сообщение)
	} else {
		Ошибка("Функция %s не найдена \n", name)
	}

}
