package main

import (
	"context"
	"time"

	. "aoanima.ru/ConnQuic"
	. "aoanima.ru/DGApi"
	. "aoanima.ru/Logger"
	. "aoanima.ru/QErrors"
	"golang.org/x/crypto/bcrypt"
)

func Регистрация(сообщение *Сообщение) (bool, СтатусСервиса) {
	ответ := сообщение.Ответ[Сервис] // получаем структуру для вставки ответа

	ответ.Сервис = Сервис
	ответ.ЗапросОбработан = true
	var логин, пароль, email string
	форма := сообщение.Запрос.Форма
	Инфо(" Регистрация форма %+v \n", форма)

	if len(форма) > 0 {

		логин, ошибка := ПолучитьЗначениеПоляФормы("логин", форма)
		if ошибка.Код != Ок {
			ответ.Данные = map[string]interface{}{
				"СтатусРегистрации": "Нет логина",
			}
			ответ.СтатусОтвета = ошибка
			return false, ошибка
		}

		пароль, ошибка = ПолучитьЗначениеПоляФормы("пароль", форма)
		if ошибка.Код != Ок {
			ответ.Данные = map[string]interface{}{
				"СтатусРегистрации": "Нет пароля",
			}
			ответ.СтатусОтвета = ошибка
			return false, ошибка
		}

		email, ошибка = ПолучитьЗначениеПоляФормы("email", форма)
		if ошибка.Код != Ок {
			ответ.Данные = map[string]interface{}{
				"СтатусРегистрации": "Нет email",
			}
			ответ.СтатусОтвета = ошибка
			return false, ошибка
		}
		Инфо(" логин %+v ; пароль %+v ; email %+v \n", логин, пароль, email)

		свободен, ошибка := ЛогинСвободен(логин)
		if !свободен && ошибка.Код != Ок {
			ответ.Данные = map[string]interface{}{
				"СтатусРегистрации": "Логин занят",
			}
			ответ.СтатусОтвета = СтатусСервиса{
				Код:   ОшибкаРегистрации,
				Текст: "Логин занят",
			}
			return false, ответ.СтатусОтвета
		}

		emailСвободен, ошибка := EmailСвободен(email)
		if !emailСвободен && ошибка.Код != Ок {
			ответ.Данные = map[string]interface{}{
				"СтатусРегистрации": "email уже заригистрирован",
			}
			ответ.СтатусОтвета = СтатусСервиса{
				Код:   ОшибкаРегистрации,
				Текст: "email уже заригистрирован",
			}
			return false, ответ.СтатусОтвета
		}
	}

	// новыйТокенКлиент := ТокенКлиента{
	// 	ИдКлиента: сообщение.ИдКлиента,
	// 	Роль:      []string{"клиент"},
	// 	Права:    []string{"чтение", "просмотр", "изменение своего"},
	// 	Истекает: time.Now().Add(60 * time.Minute),
	// 	Создан:   time.Now(),
	// }

	хэшПароля, err := bcrypt.GenerateFromPassword([]byte(пароль), bcrypt.DefaultCost)
	if err != nil {
		Ошибка(" %+v \n", err.Error())

	}
	НовыйСекретКлиента, статусСервиса := СоздатьСекретКлиента(сообщение.ИдКлиента.String())

	if статусСервиса.Код != Ок {
		Ошибка(" не удалось создать секрет клиента %+v \n", статусСервиса)
		return false, статусСервиса
	}

	JWT, ошибкаПодписи := СоздатьJWT(сообщение.ИдКлиента.String(), НовыйСекретКлиента)

	if ошибкаПодписи.Код != Ок {
		Ошибка(" не удалось создать токен  %+v \n", ошибкаПодписи)
		return false, ошибкаПодписи
	}
	НовыйКлиент := ДанныеКлиента{
		ИдКлиента: сообщение.ИдКлиента,
		Логин:     логин,
		Пароль:    string(хэшПароля),
		Email:     email,
		ПраваДоступа: []ПраваДоступа{
			{
				Роль: Роль{
					Код:     4,
					ИмяРоли: "клиент",
				},
				Права: []Права{
					{
						Код:     1,
						ИмяПрав: "чтение",
					},
					{
						Код:     4,
						ИмяПрав: "изменение своего",
					},
				},
			},
		},
		// Роль:      []string{"клиент"},
		// Права:     []string{"чтение", "просмотр", "изменение своего"},
		JWT:      JWT,
		Создан:   time.Now(),
		Обновлен: time.Now(),
	}
	сообщение.JWT = JWT
	// сообщение.ТокенКлиента = новыйТокенКлиент
	Инфо("Регистрируем нового клиента  %+v \n", НовыйКлиент)

	ошибкаСохранения := ЗарегистрироватьПользователявБД(НовыйКлиент)
	if ошибкаСохранения.Код != Ок {
		Ошибка(" не удалось сохранить в БД  %+v \n", ошибкаСохранения)
		ответ.Данные = map[string]interface{}{
			"СтатусРегистрации": "не удалось записать данные пользователя в базу",
		}

		ответ.СтатусОтвета = СтатусСервиса{
			Код:   ошибкаСохранения.Код,
			Текст: ошибкаСохранения.Текст,
		}
		return false, СтатусСервиса{
			Код:   ошибкаСохранения.Код,
			Текст: ошибкаСохранения.Текст,
		}
	}

	ответ.Данные = map[string]interface{}{
		"СтатусРегистрации": "успех",
	}
	ответ.СтатусОтвета = СтатусСервиса{
		Код:   Ок,
		Текст: "Успешная регистрация пользователя",
	}
	// ответ.ИмяШаблона = "ПотверждениеEmail"
	ответ.Данные = map[string]interface{}{
		"Аутентифицирован": true,
		"ДанныеКлиента":    НовыйКлиент,
	}

	сообщение.Ответ[Сервис] = ответ
	return true, СтатусСервиса{
		Код:   Ок,
		Текст: "Успешная регистрация пользователя",
	}
}

func ЗарегистрироватьПользователявБД(НовыйКлиент ДанныеКлиента) СтатусБазы {

	новыйКлиентаСтрока, ошибка := Json(НовыйКлиент)
	if ошибка != nil {
		Ошибка(" сериализаии нового клиента  %+v  новыйКлиент %+v \n", ошибка, НовыйКлиент)
	}
	Инфо(" новыйКлиентаСтрока %+s \n", новыйКлиентаСтрока)

	// данные := ДанныеЗапроса{
	// 	Запрос: string(новыйКлиентаСтрока),
	// 	Данные: nil,
	// }

	ctx := context.Background()
	var транзакция Транзакция
	транзакция.Txn = База.Граф.NewTxn()
	defer транзакция.Discard(ctx)

	данные := ДанныеЗапроса{
		Запрос: `query User($login : string, $email : string) {
			 				login(func: eq(<логин>, $login)){
								logins as <логин>	
			 				}	
							mail(func: eq(<email>, $email)){
								emails as email						
			 				}							
			 			}
				`,
		Мутация: []Мутация{
			{
				Условие: "@if(lt(len(logins), 1) AND lt(len(emails), 1))",
				Мутация: новыйКлиентаСтрока,
			},
		},
		Данные: map[string]string{
			"$login": НовыйКлиент.Логин,
			"$email": НовыйКлиент.Email,
		},
	}

	ответ, статус := транзакция.Измененить(данные, ctx)
	if статус.Код != Ок {
		// Инфо("СуществующиеЗаписи %+v \n", СуществующиеЗаписи)
		if len(ответ["logins"]) > 0 {
			Ошибка(" логин занят %+v \n", ответ["logins"])
			return СтатусБазы{
				Код:   статус.Код,
				Текст: "Логин занят",
			}

		}
		if len(ответ["emails"]) > 0 {
			Ошибка(" email занят %+v \n", ответ["emails"])
			return СтатусБазы{
				Код:   статус.Код,
				Текст: "Email занят",
			}
		}
	}

	данные = ДанныеЗапроса{
		Запрос: `query User($login : string) {
					<Пользователь>(func: eq(<логин>, $login)){				
						<ид_клиента>
						uid
						<логин>
						<email>
						<роль>
						<права>	
						data.type					
					}				
				}`,
		Данные: map[string]string{
			"$login": НовыйКлиент.Логин,
		},
	}

	данныеПользователя, статусПолучения := транзакция.Получить(данные)

	Инфо(" данныеПользователя %+s  статусПолученияия %+v  данные %+v \n", данныеПользователя, статусПолучения, данные)
	транзакция.Commit(ctx)

	return статус
}
