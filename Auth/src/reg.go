package main

import (
	"time"

	. "aoanima.ru/ConnQuic"
	_ "aoanima.ru/DataBase"
	. "aoanima.ru/Logger"
	. "aoanima.ru/QErrors"
	"golang.org/x/crypto/bcrypt"
)

func Регистрация(сообщение *Сообщение) (bool, ОшибкаСервиса) {
	ответ := сообщение.Ответ[Сервис] // получаем структуру для вставки ответа

	ответ.Сервис = Сервис
	ответ.ЗапросОбработан = true
	var логин, пароль, email string
	форма := сообщение.Запрос.Форма
	if len(форма) > 0 {

		логин, ошибка := ПолучитьЗначениеПоляФормы([]string{"login", "Логин"}, форма)
		if ошибка.Код != Ок {
			ответ.Данные = map[string]string{
				"СтатусРегистрации": "Нет логина",
			}
			ответ.ОшибкаСервиса = ошибка
			return false, ошибка
		}

		пароль, ошибка = ПолучитьЗначениеПоляФормы([]string{"password", "Пароль"}, форма)
		if ошибка.Код != Ок {
			ответ.Данные = map[string]string{
				"СтатусРегистрации": "Нет пароля",
			}
			ответ.ОшибкаСервиса = ошибка
			return false, ошибка
		}

		email, ошибка = ПолучитьЗначениеПоляФормы([]string{"email", "Email"}, форма)
		if ошибка.Код != Ок {
			ответ.Данные = map[string]string{
				"СтатусРегистрации": "Нет email",
			}
			ответ.ОшибкаСервиса = ошибка
			return false, ошибка
		}

		свободен, ошибка := ЛогинСвободен(логин)
		if !свободен && ошибка.Код != Ок {
			ответ.Данные = map[string]string{
				"СтатусРегистрации": "Логин занят",
			}
			ответ.ОшибкаСервиса = ОшибкаСервиса{
				Код:   ОшибкаРегистрации,
				Текст: "Логин занят",
			}
			return false, ответ.ОшибкаСервиса
		}

		emailСвободен, ошибка := EmailСвободен(email)
		if !emailСвободен && ошибка.Код != Ок {
			ответ.Данные = map[string]string{
				"СтатусРегистрации": "email уже заригистрирован",
			}
			ответ.ОшибкаСервиса = ОшибкаСервиса{
				Код:   ОшибкаРегистрации,
				Текст: "email уже заригистрирован",
			}
			return false, ответ.ОшибкаСервиса
		}
	}

	новыйТокенКлиент := ТокенКлиента{
		ИдКлиента: сообщение.ИдКлиента,
		Роль:      []string{"клиент"},
		Токен:     СоздатьТокенОбновления(16),
		Права:     []string{"клиент"},
		Истекает:  time.Now().Add(60 * time.Minute).Unix(),
		Создан:    time.Now().Unix(),
	}

	JWT, ошибкаПодписи := СоздатьJWT(новыйТокенКлиент)
	if ошибкаПодписи.Код != Ок {
		Ошибка(" не удалось создать токен  %+v \n", ошибкаПодписи)
		return false, ошибкаПодписи
	}

	сообщение.JWT = JWT
	сообщение.ТокенКлиента = новыйТокенКлиент

	хэшПароля, err := bcrypt.GenerateFromPassword([]byte(пароль), bcrypt.DefaultCost)
	if err != nil {
		Ошибка(" %+v \n", err.Error())
	}
	НовыйКлиент := ДанныеКлиента{
		ИдКлиента:       сообщение.ИдКлиента,
		Логин:           логин,
		Пароль:          string(хэшПароля),
		Email:           email,
		Роль:            []string{"клиент"},
		Права:           []string{"клиент"},
		ТокенОбновления: новыйТокенКлиент.Токен,
		JWT:             JWT,
	}

	ошибкаСохранения := СохранитьКлиентаВБД(НовыйКлиент)
	if ошибкаСохранения.Код != Ок {
		Ошибка(" не удалось сохранить в БД  %+v \n", ошибкаСохранения)
		ответ.Данные = map[string]string{
			"СтатусРегистрации": "не удалось записать данные пользователя в базу",
		}
		ответ.ОшибкаСервиса = ошибкаСохранения
		return false, ошибкаСохранения
	}

	ответ.Данные = map[string]string{
		"СтатусРегистрации": "успех",
	}
	ответ.ОшибкаСервиса = ОшибкаСервиса{
		Код:   Ок,
		Текст: "Успешная регистрация пользователя",
	}
	сообщение.Ответ[Сервис] = ответ
	return true, ОшибкаСервиса{
		Код:   Ок,
		Текст: "Успешная регистрация пользователя",
	}
}
