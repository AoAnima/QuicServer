package DGApi

import (
	. "aoanima.ru/QErrors"
)

/*
принимает массив возможных Имён искомого поля формы,[]string{"login", "Логин"} []string{"password", "Пароль"} возвращает значение первого попавшегося значения даже если их несколько
*/
// func ПолучитьЗначениеПоляФормы(вариантИмениПоля []string, форма map[string][]string) (string, СтатусСервиса) {
// 	for _, имяПоля := range вариантИмениПоля {
// 		значение, есть := форма[имяПоля]
// 		if есть {
// 			if len(значение) == 1 {
// 				return значение[0], СтатусСервиса{
// 					Код: Ок,
// 				}
// 			} else {
// 				return "", СтатусСервиса{
// 					Код:   БолееОдногоЗначения,
// 					Текст: "Более одного значения в поле формы " + имяПоля,
// 				}
// 			}
// 		}

// 		// return "", СтатусСервиса{
// 		// 	Код:   ПустоеПолеФормы,
// 		// 	Текст: "Пустое Поле Формы " + имяПоля,
// 		// }
// 	}
// 	return "", СтатусСервиса{
// 		Код:   ПустоеПолеФормы,
// 		Текст: "Нет полей для поиска",
// 	}
// }

func ПолучитьЗначениеПоляФормы(имяПоля string, форма map[string][]string) (string, СтатусСервиса) {

	значение, есть := форма[имяПоля]
	if есть {
		if len(значение) == 1 {
			return значение[0], СтатусСервиса{
				Код: Ок,
			}
		} else {
			return "", СтатусСервиса{
				Код:   БолееОдногоЗначения,
				Текст: "Более одного значения в поле формы " + имяПоля,
			}
		}
	}

	// return "", СтатусСервиса{
	// 	Код:   ПустоеПолеФормы,
	// 	Текст: "Пустое Поле Формы " + имяПоля,
	// }

	return "", СтатусСервиса{
		Код:   ПустоеПолеФормы,
		Текст: "Нет полей для поиска",
	}
}

func ПолучитьВсеЗначенияПоляФормы(имяПоля string, форма map[string][]string) ([]string, СтатусСервиса) {
	значение, есть := форма[имяПоля]
	if есть {
		if len(значение) > 0 {
			return значение, СтатусСервиса{
				Код: Ок,
			}
		} else {
			return nil, СтатусСервиса{
				Код:   ПустоеПолеФормы,
				Текст: "Пустое Поле Формы " + имяПоля,
			}
		}
	}
	return nil, СтатусСервиса{
		Код:   ПустоеПолеФормы,
		Текст: "Пустое Поле Формы " + имяПоля,
	}
}

// func ПолучитьВсеЗначенияПолейФормы(именаПолей []string, форма map[string][]string) (map[string]string, ОшибкаСервиса) {

// 	for _, имяПоля := range именаПолей {

// 		значение, есть := форма[имяПоля]
// 		if есть {
// 			if len(значение) > 0 {
// 				return значение, ОшибкаСервиса{
// 					Код: Ок,
// 				}
// 			} else {
// 				return nil, ОшибкаСервиса{
// 					Код:   ПустоеПолеФормы,
// 					Текст: "Пустое Поле Формы " + имяПоля,
// 				}
// 			}

// 		}
// 	}
// 	return nil, ОшибкаСервиса{
// 		Код:   ПустоеПолеФормы,
// 		Текст: "Пустое Поле Формы " + имяПоля,
// 	}

// }
